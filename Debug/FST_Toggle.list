
FST_Toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d28  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08003de8  08003de8  00013de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f0c  08003f0c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f0c  08003f0c  00013f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f14  08003f14  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f14  08003f14  00013f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f18  08003f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08003f8c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003f8c  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097f5  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001daf  00000000  00000000  0002988d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e0  00000000  00000000  0002b640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007c8  00000000  00000000  0002bf20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014dc7  00000000  00000000  0002c6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008d1b  00000000  00000000  000414af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007cedf  00000000  00000000  0004a1ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c70a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002440  00000000  00000000  000c7124  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003dd0 	.word	0x08003dd0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003dd0 	.word	0x08003dd0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <constructorFSM_toggle>:
 *      Author: nicolas-kruger
 */
#include "fsm_toggle.h"

void constructorFSM_toggle(struct FSM_toggle* this,GPIO_TypeDef* port,uint16_t pin,
		RTC_HandleTypeDef* hrtc,GPIO_TypeDef* portLed,uint16_t pinLed){
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	1dbb      	adds	r3, r7, #6
 8000446:	801a      	strh	r2, [r3, #0]
	constructorPb_lib(&this->pb, port, pin);
 8000448:	68f8      	ldr	r0, [r7, #12]
 800044a:	1dbb      	adds	r3, r7, #6
 800044c:	881a      	ldrh	r2, [r3, #0]
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	0019      	movs	r1, r3
 8000452:	f000 fa5a 	bl	800090a <constructorPb_lib>
	constructorRtc_lib(&this->rtc, hrtc);
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	330c      	adds	r3, #12
 800045a:	683a      	ldr	r2, [r7, #0]
 800045c:	0011      	movs	r1, r2
 800045e:	0018      	movs	r0, r3
 8000460:	f000 faa8 	bl	80009b4 <constructorRtc_lib>
	constructorLed_lib(&this->led, portLed, pinLed);
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	3328      	adds	r3, #40	; 0x28
 8000468:	0018      	movs	r0, r3
 800046a:	231c      	movs	r3, #28
 800046c:	18fb      	adds	r3, r7, r3
 800046e:	881a      	ldrh	r2, [r3, #0]
 8000470:	69bb      	ldr	r3, [r7, #24]
 8000472:	0019      	movs	r1, r3
 8000474:	f000 f885 	bl	8000582 <constructorLed_lib>
	this->currentState = FSM_DOWN;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2200      	movs	r2, #0
 800047c:	641a      	str	r2, [r3, #64]	; 0x40
	this->state[FSM_UP] = &fsmUp;
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	4a07      	ldr	r2, [pc, #28]	; (80004a0 <constructorFSM_toggle+0x68>)
 8000482:	639a      	str	r2, [r3, #56]	; 0x38
	this->state[FSM_DOWN] = &fsmDown;
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	4a07      	ldr	r2, [pc, #28]	; (80004a4 <constructorFSM_toggle+0x6c>)
 8000488:	631a      	str	r2, [r3, #48]	; 0x30
	this->state[FSM_UPPING] = &fsmUpping;
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	4a06      	ldr	r2, [pc, #24]	; (80004a8 <constructorFSM_toggle+0x70>)
 800048e:	635a      	str	r2, [r3, #52]	; 0x34
	this->state[FSM_DOWNING] = &fsmDowing;
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	4a06      	ldr	r2, [pc, #24]	; (80004ac <constructorFSM_toggle+0x74>)
 8000494:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b004      	add	sp, #16
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	080004d3 	.word	0x080004d3
 80004a4:	0800052b 	.word	0x0800052b
 80004a8:	080004f7 	.word	0x080004f7
 80004ac:	0800054f 	.word	0x0800054f

080004b0 <call>:
void call(struct FSM_toggle* this){
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	this->state[this->currentState](this);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	320c      	adds	r2, #12
 80004c0:	0092      	lsls	r2, r2, #2
 80004c2:	58d3      	ldr	r3, [r2, r3]
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	0010      	movs	r0, r2
 80004c8:	4798      	blx	r3
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b002      	add	sp, #8
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <fsmUp>:
void fsmUp(struct FSM_toggle* this){
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b082      	sub	sp, #8
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
	if(click(&this->pb)==CLICKED)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	0018      	movs	r0, r3
 80004de:	f000 fa29 	bl	8000934 <click>
 80004e2:	0003      	movs	r3, r0
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d102      	bne.n	80004ee <fsmUp+0x1c>
		this->currentState = FSM_DOWNING;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2203      	movs	r2, #3
 80004ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b002      	add	sp, #8
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <fsmUpping>:
void fsmUpping(struct FSM_toggle* this){
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b082      	sub	sp, #8
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
	ledOn(&this->led);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	3328      	adds	r3, #40	; 0x28
 8000502:	0018      	movs	r0, r3
 8000504:	f000 f84f 	bl	80005a6 <ledOn>
	atlTime(&this->rtc);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	330c      	adds	r3, #12
 800050c:	0018      	movs	r0, r3
 800050e:	f000 fa81 	bl	8000a14 <atlTime>
	printRTC(&this->rtc);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	330c      	adds	r3, #12
 8000516:	0018      	movs	r0, r3
 8000518:	f000 fa58 	bl	80009cc <printRTC>
	this->currentState = FSM_UP;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2202      	movs	r2, #2
 8000520:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b002      	add	sp, #8
 8000528:	bd80      	pop	{r7, pc}

0800052a <fsmDown>:
void fsmDown(struct FSM_toggle* this){
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
	if(click(&this->pb)==CLICKED)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	0018      	movs	r0, r3
 8000536:	f000 f9fd 	bl	8000934 <click>
 800053a:	0003      	movs	r3, r0
 800053c:	2b01      	cmp	r3, #1
 800053e:	d102      	bne.n	8000546 <fsmDown+0x1c>
			this->currentState = FSM_UPPING;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2201      	movs	r2, #1
 8000544:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b002      	add	sp, #8
 800054c:	bd80      	pop	{r7, pc}

0800054e <fsmDowing>:
void fsmDowing(struct FSM_toggle* this){
 800054e:	b580      	push	{r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
	ledOff(&this->led);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	3328      	adds	r3, #40	; 0x28
 800055a:	0018      	movs	r0, r3
 800055c:	f000 f833 	bl	80005c6 <ledOff>
	atlTime(&this->rtc);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	330c      	adds	r3, #12
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fa55 	bl	8000a14 <atlTime>
	printRTC(&this->rtc);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	330c      	adds	r3, #12
 800056e:	0018      	movs	r0, r3
 8000570:	f000 fa2c 	bl	80009cc <printRTC>
	this->currentState = FSM_DOWN;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2200      	movs	r2, #0
 8000578:	641a      	str	r2, [r3, #64]	; 0x40
}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	b002      	add	sp, #8
 8000580:	bd80      	pop	{r7, pc}

08000582 <constructorLed_lib>:
 *      Author: nicolas-kruger
 */

#include "led_lib.h"

void constructorLed_lib(struct Led_lib* this, GPIO_TypeDef* port,uint16_t pin){
 8000582:	b580      	push	{r7, lr}
 8000584:	b084      	sub	sp, #16
 8000586:	af00      	add	r7, sp, #0
 8000588:	60f8      	str	r0, [r7, #12]
 800058a:	60b9      	str	r1, [r7, #8]
 800058c:	1dbb      	adds	r3, r7, #6
 800058e:	801a      	strh	r2, [r3, #0]
	this->port=port;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	605a      	str	r2, [r3, #4]
	this->pin=pin;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	1dba      	adds	r2, r7, #6
 800059a:	8812      	ldrh	r2, [r2, #0]
 800059c:	801a      	strh	r2, [r3, #0]
}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b004      	add	sp, #16
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <ledOn>:
void ledOn(struct Led_lib* this){
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->port, this->pin, GPIO_PIN_SET);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6858      	ldr	r0, [r3, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	2201      	movs	r2, #1
 80005b8:	0019      	movs	r1, r3
 80005ba:	f000 fe8c 	bl	80012d6 <HAL_GPIO_WritePin>
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b002      	add	sp, #8
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <ledOff>:
void ledOff(struct Led_lib* this){
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->port, this->pin, GPIO_PIN_RESET);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6858      	ldr	r0, [r3, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	2200      	movs	r2, #0
 80005d8:	0019      	movs	r1, r3
 80005da:	f000 fe7c 	bl	80012d6 <HAL_GPIO_WritePin>
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fb99 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f823 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f8ed 	bl	80007d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 f8bb 	bl	8000774 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80005fe:	f000 f88f 	bl	8000720 <MX_RTC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  constructorFSM_toggle(&fsm, B1_GPIO_Port, B1_Pin, &hrtc, LD2_GPIO_Port, LD2_Pin);
 8000602:	490b      	ldr	r1, [pc, #44]	; (8000630 <main+0x48>)
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	019a      	lsls	r2, r3, #6
 8000608:	4c0a      	ldr	r4, [pc, #40]	; (8000634 <main+0x4c>)
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <main+0x50>)
 800060c:	2320      	movs	r3, #32
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	23a0      	movs	r3, #160	; 0xa0
 8000612:	05db      	lsls	r3, r3, #23
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	000b      	movs	r3, r1
 8000618:	0021      	movs	r1, r4
 800061a:	f7ff ff0d 	bl	8000438 <constructorFSM_toggle>
  while (1)
  {
	  call(&fsm);
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <main+0x50>)
 8000620:	0018      	movs	r0, r3
 8000622:	f7ff ff45 	bl	80004b0 <call>
	  HAL_Delay(10);
 8000626:	200a      	movs	r0, #10
 8000628:	f000 fbec 	bl	8000e04 <HAL_Delay>
	  call(&fsm);
 800062c:	e7f7      	b.n	800061e <main+0x36>
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	200000dc 	.word	0x200000dc
 8000634:	50000800 	.word	0x50000800
 8000638:	20000098 	.word	0x20000098

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b09d      	sub	sp, #116	; 0x74
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	2438      	movs	r4, #56	; 0x38
 8000644:	193b      	adds	r3, r7, r4
 8000646:	0018      	movs	r0, r3
 8000648:	2338      	movs	r3, #56	; 0x38
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f002 fc9f 	bl	8002f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000652:	2324      	movs	r3, #36	; 0x24
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	0018      	movs	r0, r3
 8000658:	2314      	movs	r3, #20
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f002 fc97 	bl	8002f90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000662:	003b      	movs	r3, r7
 8000664:	0018      	movs	r0, r3
 8000666:	2324      	movs	r3, #36	; 0x24
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f002 fc90 	bl	8002f90 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <SystemClock_Config+0xdc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a29      	ldr	r2, [pc, #164]	; (800071c <SystemClock_Config+0xe0>)
 8000676:	401a      	ands	r2, r3
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <SystemClock_Config+0xdc>)
 800067a:	2180      	movs	r1, #128	; 0x80
 800067c:	0109      	lsls	r1, r1, #4
 800067e:	430a      	orrs	r2, r1
 8000680:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000682:	0021      	movs	r1, r4
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2218      	movs	r2, #24
 8000688:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2201      	movs	r2, #1
 800068e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2201      	movs	r2, #1
 8000694:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	22a0      	movs	r2, #160	; 0xa0
 80006a0:	0212      	lsls	r2, r2, #8
 80006a2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 fe2f 	bl	8001310 <HAL_RCC_OscConfig>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006b6:	f000 f923 	bl	8000900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	2124      	movs	r1, #36	; 0x24
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	220f      	movs	r2, #15
 80006c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2100      	movs	r1, #0
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 f9d6 	bl	8001a90 <HAL_RCC_ClockConfig>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006e8:	f000 f90a 	bl	8000900 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 80006ec:	003b      	movs	r3, r7
 80006ee:	2222      	movs	r2, #34	; 0x22
 80006f0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006f2:	003b      	movs	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006f8:	003b      	movs	r3, r7
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	0292      	lsls	r2, r2, #10
 80006fe:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000700:	003b      	movs	r3, r7
 8000702:	0018      	movs	r0, r3
 8000704:	f001 fba8 	bl	8001e58 <HAL_RCCEx_PeriphCLKConfig>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800070c:	f000 f8f8 	bl	8000900 <Error_Handler>
  }
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	b01d      	add	sp, #116	; 0x74
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	40007000 	.word	0x40007000
 800071c:	ffffe7ff 	.word	0xffffe7ff

08000720 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_RTC_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_RTC_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_RTC_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_RTC_Init+0x4c>)
 8000732:	227f      	movs	r2, #127	; 0x7f
 8000734:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_RTC_Init+0x4c>)
 8000738:	22ff      	movs	r2, #255	; 0xff
 800073a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_RTC_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_RTC_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_RTC_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_RTC_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <MX_RTC_Init+0x4c>)
 8000756:	0018      	movs	r0, r3
 8000758:	f001 fce2 	bl	8002120 <HAL_RTC_Init>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000760:	f000 f8ce 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	200000dc 	.word	0x200000dc
 8000770:	40002800 	.word	0x40002800

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_USART2_UART_Init+0x58>)
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <MX_USART2_UART_Init+0x5c>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_USART2_UART_Init+0x58>)
 8000780:	22e1      	movs	r2, #225	; 0xe1
 8000782:	0252      	lsls	r2, r2, #9
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_USART2_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART2_UART_Init+0x58>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007b8:	0018      	movs	r0, r3
 80007ba:	f001 fe67 	bl	800248c <HAL_UART_Init>
 80007be:	1e03      	subs	r3, r0, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f89d 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000100 	.word	0x20000100
 80007d0:	40004400 	.word	0x40004400

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	240c      	movs	r4, #12
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	0018      	movs	r0, r3
 80007e0:	2314      	movs	r3, #20
 80007e2:	001a      	movs	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	f002 fbd3 	bl	8002f90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_GPIO_Init+0xbc>)
 80007ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ee:	4b28      	ldr	r3, [pc, #160]	; (8000890 <MX_GPIO_Init+0xbc>)
 80007f0:	2104      	movs	r1, #4
 80007f2:	430a      	orrs	r2, r1
 80007f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80007f6:	4b26      	ldr	r3, [pc, #152]	; (8000890 <MX_GPIO_Init+0xbc>)
 80007f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fa:	2204      	movs	r2, #4
 80007fc:	4013      	ands	r3, r2
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <MX_GPIO_Init+0xbc>)
 8000804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_GPIO_Init+0xbc>)
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	430a      	orrs	r2, r1
 800080c:	62da      	str	r2, [r3, #44]	; 0x2c
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <MX_GPIO_Init+0xbc>)
 8000810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	4013      	ands	r3, r2
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_GPIO_Init+0xbc>)
 800081c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_GPIO_Init+0xbc>)
 8000820:	2101      	movs	r1, #1
 8000822:	430a      	orrs	r2, r1
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_GPIO_Init+0xbc>)
 8000828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082a:	2201      	movs	r2, #1
 800082c:	4013      	ands	r3, r2
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000832:	23a0      	movs	r3, #160	; 0xa0
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	2200      	movs	r2, #0
 8000838:	2120      	movs	r1, #32
 800083a:	0018      	movs	r0, r3
 800083c:	f000 fd4b 	bl	80012d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	0192      	lsls	r2, r2, #6
 8000846:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	4a12      	ldr	r2, [pc, #72]	; (8000894 <MX_GPIO_Init+0xc0>)
 800084c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000854:	193b      	adds	r3, r7, r4
 8000856:	4a10      	ldr	r2, [pc, #64]	; (8000898 <MX_GPIO_Init+0xc4>)
 8000858:	0019      	movs	r1, r3
 800085a:	0010      	movs	r0, r2
 800085c:	f000 fba8 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000860:	0021      	movs	r1, r4
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2220      	movs	r2, #32
 8000866:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2201      	movs	r2, #1
 800086c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800087a:	187a      	adds	r2, r7, r1
 800087c:	23a0      	movs	r3, #160	; 0xa0
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	0011      	movs	r1, r2
 8000882:	0018      	movs	r0, r3
 8000884:	f000 fb94 	bl	8000fb0 <HAL_GPIO_Init>

}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b009      	add	sp, #36	; 0x24
 800088e:	bd90      	pop	{r4, r7, pc}
 8000890:	40021000 	.word	0x40021000
 8000894:	10210000 	.word	0x10210000
 8000898:	50000800 	.word	0x50000800

0800089c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	210c      	movs	r1, #12
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	701a      	strb	r2, [r3, #0]
 HAL_UART_Transmit(&huart2, c, 1, 10);
 80008ae:	1879      	adds	r1, r7, r1
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <__io_putchar+0x28>)
 80008b2:	230a      	movs	r3, #10
 80008b4:	2201      	movs	r2, #1
 80008b6:	f001 fe3d 	bl	8002534 <HAL_UART_Transmit>
 return ch;
 80008ba:	687b      	ldr	r3, [r7, #4]
}
 80008bc:	0018      	movs	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	b004      	add	sp, #16
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000100 	.word	0x20000100

080008c8 <_write>:
int _write(int file,char *ptr, int len)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	e009      	b.n	80008ee <_write+0x26>
 {
 __io_putchar(*ptr++);
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	1c5a      	adds	r2, r3, #1
 80008de:	60ba      	str	r2, [r7, #8]
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	0018      	movs	r0, r3
 80008e4:	f7ff ffda 	bl	800089c <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	3301      	adds	r3, #1
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	697a      	ldr	r2, [r7, #20]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	dbf1      	blt.n	80008da <_write+0x12>
 }
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	0018      	movs	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b006      	add	sp, #24
 80008fe:	bd80      	pop	{r7, pc}

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <constructorPb_lib>:
 *  Created on: Jan 10, 2021
 *      Author: nicolas-kruger
 */
#include "pb_lib.h"

void constructorPb_lib(struct Pb_lib* this,GPIO_TypeDef* port,uint16_t pin){
 800090a:	b580      	push	{r7, lr}
 800090c:	b084      	sub	sp, #16
 800090e:	af00      	add	r7, sp, #0
 8000910:	60f8      	str	r0, [r7, #12]
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	1dbb      	adds	r3, r7, #6
 8000916:	801a      	strh	r2, [r3, #0]
	this->pin = pin;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	1dba      	adds	r2, r7, #6
 800091c:	8812      	ldrh	r2, [r2, #0]
 800091e:	801a      	strh	r2, [r3, #0]
	this->port= port;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	605a      	str	r2, [r3, #4]
	this->state = DOWN;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	2200      	movs	r2, #0
 800092a:	811a      	strh	r2, [r3, #8]
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b004      	add	sp, #16
 8000932:	bd80      	pop	{r7, pc}

08000934 <click>:
int click(struct Pb_lib* this){
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	int state = HAL_GPIO_ReadPin(this->port, this->pin);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685a      	ldr	r2, [r3, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	0019      	movs	r1, r3
 8000946:	0010      	movs	r0, r2
 8000948:	f000 fca8 	bl	800129c <HAL_GPIO_ReadPin>
 800094c:	0003      	movs	r3, r0
 800094e:	60fb      	str	r3, [r7, #12]
	for(int i= 0;i<STEEP_LOOP_PB;i++){
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	e014      	b.n	8000980 <click+0x4c>
		if(state!=HAL_GPIO_ReadPin(this->port, this->pin))
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	685a      	ldr	r2, [r3, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	0019      	movs	r1, r3
 8000960:	0010      	movs	r0, r2
 8000962:	f000 fc9b 	bl	800129c <HAL_GPIO_ReadPin>
 8000966:	0003      	movs	r3, r0
 8000968:	001a      	movs	r2, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	4293      	cmp	r3, r2
 800096e:	d001      	beq.n	8000974 <click+0x40>
			return UNCLICKED;
 8000970:	2300      	movs	r3, #0
 8000972:	e01b      	b.n	80009ac <click+0x78>
		HAL_Delay(DELAY_PB);
 8000974:	2001      	movs	r0, #1
 8000976:	f000 fa45 	bl	8000e04 <HAL_Delay>
	for(int i= 0;i<STEEP_LOOP_PB;i++){
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	3301      	adds	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	2b09      	cmp	r3, #9
 8000984:	dde7      	ble.n	8000956 <click+0x22>
	}
	int ret = UNCLICKED;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
	if(this->state==DOWN&&state!=this->state){
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	891b      	ldrh	r3, [r3, #8]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d107      	bne.n	80009a2 <click+0x6e>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	891b      	ldrh	r3, [r3, #8]
 8000996:	001a      	movs	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4293      	cmp	r3, r2
 800099c:	d001      	beq.n	80009a2 <click+0x6e>
		ret = CLICKED;
 800099e:	2301      	movs	r3, #1
 80009a0:	613b      	str	r3, [r7, #16]
	}
	this->state = state;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	811a      	strh	r2, [r3, #8]
	return ret;
 80009aa:	693b      	ldr	r3, [r7, #16]
}
 80009ac:	0018      	movs	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b006      	add	sp, #24
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <constructorRtc_lib>:
 *  Created on: Jan 10, 2021
 *      Author: nicolas-kruger
 */
#include "rtc_lib.h"

void constructorRtc_lib(struct Rtc_lib* this,RTC_HandleTypeDef* hrtc){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	this->hrtc = hrtc;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	601a      	str	r2, [r3, #0]
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b002      	add	sp, #8
 80009ca:	bd80      	pop	{r7, pc}

080009cc <printRTC>:
void printRTC(struct Rtc_lib* this){
 80009cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af04      	add	r7, sp, #16
 80009d2:	6078      	str	r0, [r7, #4]
	printf("%02d/%02d/%02d %02d:%02d:%02d\n\r",this->sdate.Date,this->sdate.Month,this->sdate.Year,
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	7e9b      	ldrb	r3, [r3, #26]
 80009d8:	001c      	movs	r4, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	7e5b      	ldrb	r3, [r3, #25]
 80009de:	001d      	movs	r5, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7edb      	ldrb	r3, [r3, #27]
 80009e4:	001e      	movs	r6, r3
			this->stime.Hours,this->stime.Minutes,this->stime.Seconds);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	791b      	ldrb	r3, [r3, #4]
	printf("%02d/%02d/%02d %02d:%02d:%02d\n\r",this->sdate.Date,this->sdate.Month,this->sdate.Year,
 80009ea:	001a      	movs	r2, r3
			this->stime.Hours,this->stime.Minutes,this->stime.Seconds);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	795b      	ldrb	r3, [r3, #5]
	printf("%02d/%02d/%02d %02d:%02d:%02d\n\r",this->sdate.Date,this->sdate.Month,this->sdate.Year,
 80009f0:	0019      	movs	r1, r3
			this->stime.Hours,this->stime.Minutes,this->stime.Seconds);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	799b      	ldrb	r3, [r3, #6]
	printf("%02d/%02d/%02d %02d:%02d:%02d\n\r",this->sdate.Date,this->sdate.Month,this->sdate.Year,
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <printRTC+0x44>)
 80009f8:	9302      	str	r3, [sp, #8]
 80009fa:	9101      	str	r1, [sp, #4]
 80009fc:	9200      	str	r2, [sp, #0]
 80009fe:	0033      	movs	r3, r6
 8000a00:	002a      	movs	r2, r5
 8000a02:	0021      	movs	r1, r4
 8000a04:	f002 facc 	bl	8002fa0 <iprintf>
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b003      	add	sp, #12
 8000a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a10:	08003de8 	.word	0x08003de8

08000a14 <atlTime>:
void atlTime(struct Rtc_lib* this){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetDate(this->hrtc, &this->sdate, RTC_FORMAT_BIN);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6818      	ldr	r0, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3318      	adds	r3, #24
 8000a24:	2200      	movs	r2, #0
 8000a26:	0019      	movs	r1, r3
 8000a28:	f001 fc74 	bl	8002314 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(this->hrtc, &this->stime, RTC_FORMAT_BIN);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3304      	adds	r3, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	0019      	movs	r1, r3
 8000a38:	f001 fc10 	bl	800225c <HAL_RTC_GetTime>
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b002      	add	sp, #8
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <HAL_MspInit+0x24>)
 8000a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x24>)
 8000a4e:	2101      	movs	r1, #1
 8000a50:	430a      	orrs	r2, r1
 8000a52:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <HAL_MspInit+0x24>)
 8000a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_MspInit+0x24>)
 8000a5a:	2180      	movs	r1, #128	; 0x80
 8000a5c:	0549      	lsls	r1, r1, #21
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <HAL_RTC_MspInit+0x28>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d106      	bne.n	8000a8c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_RTC_MspInit+0x2c>)
 8000a80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_RTC_MspInit+0x2c>)
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	02c9      	lsls	r1, r1, #11
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40002800 	.word	0x40002800
 8000a98:	40021000 	.word	0x40021000

08000a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	2314      	movs	r3, #20
 8000aac:	001a      	movs	r2, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f002 fa6e 	bl	8002f90 <memset>
  if(huart->Instance==USART2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a18      	ldr	r2, [pc, #96]	; (8000b1c <HAL_UART_MspInit+0x80>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d129      	bne.n	8000b12 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <HAL_UART_MspInit+0x84>)
 8000ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <HAL_UART_MspInit+0x84>)
 8000ac4:	2180      	movs	r1, #128	; 0x80
 8000ac6:	0289      	lsls	r1, r1, #10
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_UART_MspInit+0x84>)
 8000ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <HAL_UART_MspInit+0x84>)
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <HAL_UART_MspInit+0x84>)
 8000ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000adc:	2201      	movs	r2, #1
 8000ade:	4013      	ands	r3, r2
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ae4:	210c      	movs	r1, #12
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	220c      	movs	r2, #12
 8000aea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2202      	movs	r2, #2
 8000af0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2203      	movs	r2, #3
 8000afc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2204      	movs	r2, #4
 8000b02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	187a      	adds	r2, r7, r1
 8000b06:	23a0      	movs	r3, #160	; 0xa0
 8000b08:	05db      	lsls	r3, r3, #23
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f000 fa4f 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b008      	add	sp, #32
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	40004400 	.word	0x40004400
 8000b20:	40021000 	.word	0x40021000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 f93e 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	e00a      	b.n	8000b7e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b68:	e000      	b.n	8000b6c <_read+0x16>
 8000b6a:	bf00      	nop
 8000b6c:	0001      	movs	r1, r0
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	60ba      	str	r2, [r7, #8]
 8000b74:	b2ca      	uxtb	r2, r1
 8000b76:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	dbf0      	blt.n	8000b68 <_read+0x12>
	}

return len;
 8000b86:	687b      	ldr	r3, [r7, #4]
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b006      	add	sp, #24
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	return -1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	425b      	negs	r3, r3
}
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b002      	add	sp, #8
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	2280      	movs	r2, #128	; 0x80
 8000bb2:	0192      	lsls	r2, r2, #6
 8000bb4:	605a      	str	r2, [r3, #4]
	return 0;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_isatty>:

int _isatty(int file)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	return 1;
 8000bc8:	2301      	movs	r3, #1
}
 8000bca:	0018      	movs	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b084      	sub	sp, #16
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	60f8      	str	r0, [r7, #12]
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
	return 0;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	0018      	movs	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b004      	add	sp, #16
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	18d3      	adds	r3, r2, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f002 f990 	bl	8002f3c <__errno>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	425b      	negs	r3, r3
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	18d2      	adds	r2, r2, r3
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <_sbrk+0x64>)
 8000c38:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b006      	add	sp, #24
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20002000 	.word	0x20002000
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	2000008c 	.word	0x2000008c
 8000c50:	20000188 	.word	0x20000188

08000c54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <SystemInit+0x64>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <SystemInit+0x64>)
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	0049      	lsls	r1, r1, #1
 8000c62:	430a      	orrs	r2, r1
 8000c64:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <SystemInit+0x64>)
 8000c68:	68da      	ldr	r2, [r3, #12]
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <SystemInit+0x64>)
 8000c6c:	4913      	ldr	r1, [pc, #76]	; (8000cbc <SystemInit+0x68>)
 8000c6e:	400a      	ands	r2, r1
 8000c70:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <SystemInit+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <SystemInit+0x64>)
 8000c78:	4911      	ldr	r1, [pc, #68]	; (8000cc0 <SystemInit+0x6c>)
 8000c7a:	400a      	ands	r2, r1
 8000c7c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <SystemInit+0x64>)
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <SystemInit+0x64>)
 8000c84:	2101      	movs	r1, #1
 8000c86:	438a      	bics	r2, r1
 8000c88:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <SystemInit+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <SystemInit+0x64>)
 8000c90:	490c      	ldr	r1, [pc, #48]	; (8000cc4 <SystemInit+0x70>)
 8000c92:	400a      	ands	r2, r1
 8000c94:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <SystemInit+0x64>)
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <SystemInit+0x64>)
 8000c9c:	490a      	ldr	r1, [pc, #40]	; (8000cc8 <SystemInit+0x74>)
 8000c9e:	400a      	ands	r2, r1
 8000ca0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SystemInit+0x64>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <SystemInit+0x78>)
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	0512      	lsls	r2, r2, #20
 8000cae:	609a      	str	r2, [r3, #8]
#endif
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	88ff400c 	.word	0x88ff400c
 8000cc0:	fef6fff6 	.word	0xfef6fff6
 8000cc4:	fffbffff 	.word	0xfffbffff
 8000cc8:	ff02ffff 	.word	0xff02ffff
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000cd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cd6:	e003      	b.n	8000ce0 <LoopCopyDataInit>

08000cd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000cda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cde:	3104      	adds	r1, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ce0:	480b      	ldr	r0, [pc, #44]	; (8000d10 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000ce4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ce6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ce8:	d3f6      	bcc.n	8000cd8 <CopyDataInit>
  ldr  r2, =_sbss
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000cec:	e002      	b.n	8000cf4 <LoopFillZerobss>

08000cee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000cee:	2300      	movs	r3, #0
  str  r3, [r2]
 8000cf0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf2:	3204      	adds	r2, #4

08000cf4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <LoopForever+0x16>)
  cmp  r2, r3
 8000cf6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cf8:	d3f9      	bcc.n	8000cee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cfa:	f7ff ffab 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f002 f923 	bl	8002f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d02:	f7ff fc71 	bl	80005e8 <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   r0, =_estack
 8000d08:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8000d0c:	08003f1c 	.word	0x08003f1c
  ldr  r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d14:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000d18:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000d1c:	20000188 	.word	0x20000188

08000d20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_COMP_IRQHandler>
	...

08000d24 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_Init+0x3c>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_Init+0x3c>)
 8000d36:	2140      	movs	r1, #64	; 0x40
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f000 f811 	bl	8000d64 <HAL_InitTick>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e001      	b.n	8000d52 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d4e:	f7ff fe79 	bl	8000a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
}
 8000d56:	0018      	movs	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	40022000 	.word	0x40022000

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_InitTick+0x5c>)
 8000d6e:	681c      	ldr	r4, [r3, #0]
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <HAL_InitTick+0x60>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	0019      	movs	r1, r3
 8000d76:	23fa      	movs	r3, #250	; 0xfa
 8000d78:	0098      	lsls	r0, r3, #2
 8000d7a:	f7ff f9c5 	bl	8000108 <__udivsi3>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	0019      	movs	r1, r3
 8000d82:	0020      	movs	r0, r4
 8000d84:	f7ff f9c0 	bl	8000108 <__udivsi3>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 f903 	bl	8000f96 <HAL_SYSTICK_Config>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e00f      	b.n	8000db8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d80b      	bhi.n	8000db6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	2301      	movs	r3, #1
 8000da2:	425b      	negs	r3, r3
 8000da4:	2200      	movs	r2, #0
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 f8e0 	bl	8000f6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_InitTick+0x64>)
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e000      	b.n	8000db8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b003      	add	sp, #12
 8000dbe:	bd90      	pop	{r4, r7, pc}
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <HAL_IncTick+0x1c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_IncTick+0x20>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	18d2      	adds	r2, r2, r3
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_IncTick+0x20>)
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000180 	.word	0x20000180

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <HAL_GetTick+0x10>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	0018      	movs	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	20000180 	.word	0x20000180

08000e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e0c:	f7ff fff0 	bl	8000df0 <HAL_GetTick>
 8000e10:	0003      	movs	r3, r0
 8000e12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	d005      	beq.n	8000e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_Delay+0x40>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	001a      	movs	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	189b      	adds	r3, r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	f7ff ffe0 	bl	8000df0 <HAL_GetTick>
 8000e30:	0002      	movs	r2, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d8f7      	bhi.n	8000e2c <HAL_Delay+0x28>
  {
  }
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b004      	add	sp, #16
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000008 	.word	0x20000008

08000e48 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	0002      	movs	r2, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e5c:	d932      	bls.n	8000ec4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e5e:	4a2f      	ldr	r2, [pc, #188]	; (8000f1c <NVIC_SetPriority+0xd4>)
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	0019      	movs	r1, r3
 8000e66:	230f      	movs	r3, #15
 8000e68:	400b      	ands	r3, r1
 8000e6a:	3b08      	subs	r3, #8
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3306      	adds	r3, #6
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	18d3      	adds	r3, r2, r3
 8000e74:	3304      	adds	r3, #4
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	1dfa      	adds	r2, r7, #7
 8000e7a:	7812      	ldrb	r2, [r2, #0]
 8000e7c:	0011      	movs	r1, r2
 8000e7e:	2203      	movs	r2, #3
 8000e80:	400a      	ands	r2, r1
 8000e82:	00d2      	lsls	r2, r2, #3
 8000e84:	21ff      	movs	r1, #255	; 0xff
 8000e86:	4091      	lsls	r1, r2
 8000e88:	000a      	movs	r2, r1
 8000e8a:	43d2      	mvns	r2, r2
 8000e8c:	401a      	ands	r2, r3
 8000e8e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	019b      	lsls	r3, r3, #6
 8000e94:	22ff      	movs	r2, #255	; 0xff
 8000e96:	401a      	ands	r2, r3
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	4003      	ands	r3, r0
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea6:	481d      	ldr	r0, [pc, #116]	; (8000f1c <NVIC_SetPriority+0xd4>)
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	001c      	movs	r4, r3
 8000eae:	230f      	movs	r3, #15
 8000eb0:	4023      	ands	r3, r4
 8000eb2:	3b08      	subs	r3, #8
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	3306      	adds	r3, #6
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	18c3      	adds	r3, r0, r3
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ec2:	e027      	b.n	8000f14 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec4:	4a16      	ldr	r2, [pc, #88]	; (8000f20 <NVIC_SetPriority+0xd8>)
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	33c0      	adds	r3, #192	; 0xc0
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	589b      	ldr	r3, [r3, r2]
 8000ed4:	1dfa      	adds	r2, r7, #7
 8000ed6:	7812      	ldrb	r2, [r2, #0]
 8000ed8:	0011      	movs	r1, r2
 8000eda:	2203      	movs	r2, #3
 8000edc:	400a      	ands	r2, r1
 8000ede:	00d2      	lsls	r2, r2, #3
 8000ee0:	21ff      	movs	r1, #255	; 0xff
 8000ee2:	4091      	lsls	r1, r2
 8000ee4:	000a      	movs	r2, r1
 8000ee6:	43d2      	mvns	r2, r2
 8000ee8:	401a      	ands	r2, r3
 8000eea:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	019b      	lsls	r3, r3, #6
 8000ef0:	22ff      	movs	r2, #255	; 0xff
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	0018      	movs	r0, r3
 8000efa:	2303      	movs	r3, #3
 8000efc:	4003      	ands	r3, r0
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f02:	4807      	ldr	r0, [pc, #28]	; (8000f20 <NVIC_SetPriority+0xd8>)
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	33c0      	adds	r3, #192	; 0xc0
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	501a      	str	r2, [r3, r0]
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b003      	add	sp, #12
 8000f1a:	bd90      	pop	{r4, r7, pc}
 8000f1c:	e000ed00 	.word	0xe000ed00
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <SysTick_Config+0x40>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d901      	bls.n	8000f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f36:	2301      	movs	r3, #1
 8000f38:	e010      	b.n	8000f5c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <SysTick_Config+0x44>)
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	3a01      	subs	r2, #1
 8000f40:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f42:	2301      	movs	r3, #1
 8000f44:	425b      	negs	r3, r3
 8000f46:	2103      	movs	r1, #3
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f7ff ff7d 	bl	8000e48 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <SysTick_Config+0x44>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SysTick_Config+0x44>)
 8000f56:	2207      	movs	r2, #7
 8000f58:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	00ffffff 	.word	0x00ffffff
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
 8000f76:	210f      	movs	r1, #15
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	1c02      	adds	r2, r0, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b25b      	sxtb	r3, r3
 8000f86:	0011      	movs	r1, r2
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff ff5d 	bl	8000e48 <NVIC_SetPriority>
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b004      	add	sp, #16
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f7ff ffbf 	bl	8000f24 <SysTick_Config>
 8000fa6:	0003      	movs	r3, r0
}
 8000fa8:	0018      	movs	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b002      	add	sp, #8
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fc6:	e14f      	b.n	8001268 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	4091      	lsls	r1, r2
 8000fd2:	000a      	movs	r2, r1
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d100      	bne.n	8000fe0 <HAL_GPIO_Init+0x30>
 8000fde:	e140      	b.n	8001262 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d00b      	beq.n	8001000 <HAL_GPIO_Init+0x50>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d007      	beq.n	8001000 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff4:	2b11      	cmp	r3, #17
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b12      	cmp	r3, #18
 8000ffe:	d130      	bne.n	8001062 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	409a      	lsls	r2, r3
 800100e:	0013      	movs	r3, r2
 8001010:	43da      	mvns	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	409a      	lsls	r2, r3
 8001022:	0013      	movs	r3, r2
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001036:	2201      	movs	r2, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	2201      	movs	r2, #1
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	43da      	mvns	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	409a      	lsls	r2, r3
 8001084:	0013      	movs	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0xf2>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b12      	cmp	r3, #18
 80010a0:	d123      	bne.n	80010ea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	08da      	lsrs	r2, r3, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3208      	adds	r2, #8
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	58d3      	ldr	r3, [r2, r3]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	2207      	movs	r2, #7
 80010b4:	4013      	ands	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	220f      	movs	r2, #15
 80010ba:	409a      	lsls	r2, r3
 80010bc:	0013      	movs	r3, r2
 80010be:	43da      	mvns	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	691a      	ldr	r2, [r3, #16]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	2107      	movs	r1, #7
 80010ce:	400b      	ands	r3, r1
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	409a      	lsls	r2, r3
 80010d4:	0013      	movs	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	08da      	lsrs	r2, r3, #3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3208      	adds	r2, #8
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	6939      	ldr	r1, [r7, #16]
 80010e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	409a      	lsls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	43da      	mvns	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2203      	movs	r2, #3
 8001108:	401a      	ands	r2, r3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	055b      	lsls	r3, r3, #21
 8001126:	4013      	ands	r3, r2
 8001128:	d100      	bne.n	800112c <HAL_GPIO_Init+0x17c>
 800112a:	e09a      	b.n	8001262 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112c:	4b54      	ldr	r3, [pc, #336]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 800112e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001130:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 8001132:	2101      	movs	r1, #1
 8001134:	430a      	orrs	r2, r1
 8001136:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001138:	4a52      	ldr	r2, [pc, #328]	; (8001284 <HAL_GPIO_Init+0x2d4>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	589b      	ldr	r3, [r3, r2]
 8001144:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2203      	movs	r2, #3
 800114a:	4013      	ands	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	409a      	lsls	r2, r3
 8001152:	0013      	movs	r3, r2
 8001154:	43da      	mvns	r2, r3
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	23a0      	movs	r3, #160	; 0xa0
 8001160:	05db      	lsls	r3, r3, #23
 8001162:	429a      	cmp	r2, r3
 8001164:	d019      	beq.n	800119a <HAL_GPIO_Init+0x1ea>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a47      	ldr	r2, [pc, #284]	; (8001288 <HAL_GPIO_Init+0x2d8>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d013      	beq.n	8001196 <HAL_GPIO_Init+0x1e6>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a46      	ldr	r2, [pc, #280]	; (800128c <HAL_GPIO_Init+0x2dc>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d00d      	beq.n	8001192 <HAL_GPIO_Init+0x1e2>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a45      	ldr	r2, [pc, #276]	; (8001290 <HAL_GPIO_Init+0x2e0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d007      	beq.n	800118e <HAL_GPIO_Init+0x1de>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a44      	ldr	r2, [pc, #272]	; (8001294 <HAL_GPIO_Init+0x2e4>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d101      	bne.n	800118a <HAL_GPIO_Init+0x1da>
 8001186:	2305      	movs	r3, #5
 8001188:	e008      	b.n	800119c <HAL_GPIO_Init+0x1ec>
 800118a:	2306      	movs	r3, #6
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x1ec>
 800118e:	2303      	movs	r3, #3
 8001190:	e004      	b.n	800119c <HAL_GPIO_Init+0x1ec>
 8001192:	2302      	movs	r3, #2
 8001194:	e002      	b.n	800119c <HAL_GPIO_Init+0x1ec>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <HAL_GPIO_Init+0x1ec>
 800119a:	2300      	movs	r3, #0
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	2103      	movs	r1, #3
 80011a0:	400a      	ands	r2, r1
 80011a2:	0092      	lsls	r2, r2, #2
 80011a4:	4093      	lsls	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ac:	4935      	ldr	r1, [pc, #212]	; (8001284 <HAL_GPIO_Init+0x2d4>)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <HAL_GPIO_Init+0x2e8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43da      	mvns	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	025b      	lsls	r3, r3, #9
 80011d2:	4013      	ands	r3, r2
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011de:	4b2e      	ldr	r3, [pc, #184]	; (8001298 <HAL_GPIO_Init+0x2e8>)
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011e4:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <HAL_GPIO_Init+0x2e8>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43da      	mvns	r2, r3
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	029b      	lsls	r3, r3, #10
 80011fc:	4013      	ands	r3, r2
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <HAL_GPIO_Init+0x2e8>)
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <HAL_GPIO_Init+0x2e8>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43da      	mvns	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	035b      	lsls	r3, r3, #13
 8001226:	4013      	ands	r3, r2
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <HAL_GPIO_Init+0x2e8>)
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <HAL_GPIO_Init+0x2e8>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43da      	mvns	r2, r3
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	039b      	lsls	r3, r3, #14
 8001250:	4013      	ands	r3, r2
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_GPIO_Init+0x2e8>)
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	40da      	lsrs	r2, r3
 8001270:	1e13      	subs	r3, r2, #0
 8001272:	d000      	beq.n	8001276 <HAL_GPIO_Init+0x2c6>
 8001274:	e6a8      	b.n	8000fc8 <HAL_GPIO_Init+0x18>
  }
}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	b006      	add	sp, #24
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	40021000 	.word	0x40021000
 8001284:	40010000 	.word	0x40010000
 8001288:	50000400 	.word	0x50000400
 800128c:	50000800 	.word	0x50000800
 8001290:	50000c00 	.word	0x50000c00
 8001294:	50001c00 	.word	0x50001c00
 8001298:	40010400 	.word	0x40010400

0800129c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	000a      	movs	r2, r1
 80012a6:	1cbb      	adds	r3, r7, #2
 80012a8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	1cba      	adds	r2, r7, #2
 80012b0:	8812      	ldrh	r2, [r2, #0]
 80012b2:	4013      	ands	r3, r2
 80012b4:	d004      	beq.n	80012c0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80012b6:	230f      	movs	r3, #15
 80012b8:	18fb      	adds	r3, r7, r3
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
 80012be:	e003      	b.n	80012c8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012c0:	230f      	movs	r3, #15
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80012c8:	230f      	movs	r3, #15
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	781b      	ldrb	r3, [r3, #0]
}
 80012ce:	0018      	movs	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b004      	add	sp, #16
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	0008      	movs	r0, r1
 80012e0:	0011      	movs	r1, r2
 80012e2:	1cbb      	adds	r3, r7, #2
 80012e4:	1c02      	adds	r2, r0, #0
 80012e6:	801a      	strh	r2, [r3, #0]
 80012e8:	1c7b      	adds	r3, r7, #1
 80012ea:	1c0a      	adds	r2, r1, #0
 80012ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012ee:	1c7b      	adds	r3, r7, #1
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f6:	1cbb      	adds	r3, r7, #2
 80012f8:	881a      	ldrh	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80012fe:	e003      	b.n	8001308 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001300:	1cbb      	adds	r3, r7, #2
 8001302:	881a      	ldrh	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	f000 fbab 	bl	8001a7a <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001324:	4bce      	ldr	r3, [pc, #824]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	220c      	movs	r2, #12
 800132a:	4013      	ands	r3, r2
 800132c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800132e:	4bcc      	ldr	r3, [pc, #816]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	025b      	lsls	r3, r3, #9
 8001336:	4013      	ands	r3, r2
 8001338:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2201      	movs	r2, #1
 8001340:	4013      	ands	r3, r2
 8001342:	d100      	bne.n	8001346 <HAL_RCC_OscConfig+0x36>
 8001344:	e07e      	b.n	8001444 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	2b08      	cmp	r3, #8
 800134a:	d007      	beq.n	800135c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	2b0c      	cmp	r3, #12
 8001350:	d112      	bne.n	8001378 <HAL_RCC_OscConfig+0x68>
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	025b      	lsls	r3, r3, #9
 8001358:	429a      	cmp	r2, r3
 800135a:	d10d      	bne.n	8001378 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	4bc0      	ldr	r3, [pc, #768]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	029b      	lsls	r3, r3, #10
 8001364:	4013      	ands	r3, r2
 8001366:	d100      	bne.n	800136a <HAL_RCC_OscConfig+0x5a>
 8001368:	e06b      	b.n	8001442 <HAL_RCC_OscConfig+0x132>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d167      	bne.n	8001442 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	f000 fb81 	bl	8001a7a <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	025b      	lsls	r3, r3, #9
 8001380:	429a      	cmp	r2, r3
 8001382:	d107      	bne.n	8001394 <HAL_RCC_OscConfig+0x84>
 8001384:	4bb6      	ldr	r3, [pc, #728]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4bb5      	ldr	r3, [pc, #724]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	0249      	lsls	r1, r1, #9
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e027      	b.n	80013e4 <HAL_RCC_OscConfig+0xd4>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	23a0      	movs	r3, #160	; 0xa0
 800139a:	02db      	lsls	r3, r3, #11
 800139c:	429a      	cmp	r2, r3
 800139e:	d10e      	bne.n	80013be <HAL_RCC_OscConfig+0xae>
 80013a0:	4baf      	ldr	r3, [pc, #700]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4bae      	ldr	r3, [pc, #696]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	02c9      	lsls	r1, r1, #11
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	4bac      	ldr	r3, [pc, #688]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4bab      	ldr	r3, [pc, #684]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	0249      	lsls	r1, r1, #9
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	e012      	b.n	80013e4 <HAL_RCC_OscConfig+0xd4>
 80013be:	4ba8      	ldr	r3, [pc, #672]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4ba7      	ldr	r3, [pc, #668]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80013c4:	49a7      	ldr	r1, [pc, #668]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80013c6:	400a      	ands	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	4ba5      	ldr	r3, [pc, #660]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	025b      	lsls	r3, r3, #9
 80013d2:	4013      	ands	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4ba1      	ldr	r3, [pc, #644]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4ba0      	ldr	r3, [pc, #640]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80013de:	49a2      	ldr	r1, [pc, #648]	; (8001668 <HAL_RCC_OscConfig+0x358>)
 80013e0:	400a      	ands	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d015      	beq.n	8001418 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fd00 	bl	8000df0 <HAL_GetTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013f4:	e009      	b.n	800140a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f6:	f7ff fcfb 	bl	8000df0 <HAL_GetTick>
 80013fa:	0002      	movs	r2, r0
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b64      	cmp	r3, #100	; 0x64
 8001402:	d902      	bls.n	800140a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	f000 fb38 	bl	8001a7a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800140a:	4b95      	ldr	r3, [pc, #596]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	029b      	lsls	r3, r3, #10
 8001412:	4013      	ands	r3, r2
 8001414:	d0ef      	beq.n	80013f6 <HAL_RCC_OscConfig+0xe6>
 8001416:	e015      	b.n	8001444 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fcea 	bl	8000df0 <HAL_GetTick>
 800141c:	0003      	movs	r3, r0
 800141e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001422:	f7ff fce5 	bl	8000df0 <HAL_GetTick>
 8001426:	0002      	movs	r2, r0
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b64      	cmp	r3, #100	; 0x64
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e322      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001434:	4b8a      	ldr	r3, [pc, #552]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	029b      	lsls	r3, r3, #10
 800143c:	4013      	ands	r3, r2
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0x112>
 8001440:	e000      	b.n	8001444 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001442:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2202      	movs	r2, #2
 800144a:	4013      	ands	r3, r2
 800144c:	d100      	bne.n	8001450 <HAL_RCC_OscConfig+0x140>
 800144e:	e08a      	b.n	8001566 <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d005      	beq.n	8001468 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	2b0c      	cmp	r3, #12
 8001460:	d13d      	bne.n	80014de <HAL_RCC_OscConfig+0x1ce>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d13a      	bne.n	80014de <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001468:	4b7d      	ldr	r3, [pc, #500]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2204      	movs	r2, #4
 800146e:	4013      	ands	r3, r2
 8001470:	d004      	beq.n	800147c <HAL_RCC_OscConfig+0x16c>
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e2fe      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147c:	4b78      	ldr	r3, [pc, #480]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4a7a      	ldr	r2, [pc, #488]	; (800166c <HAL_RCC_OscConfig+0x35c>)
 8001482:	4013      	ands	r3, r2
 8001484:	0019      	movs	r1, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	021a      	lsls	r2, r3, #8
 800148c:	4b74      	ldr	r3, [pc, #464]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 800148e:	430a      	orrs	r2, r1
 8001490:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001492:	4b73      	ldr	r3, [pc, #460]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2209      	movs	r2, #9
 8001498:	4393      	bics	r3, r2
 800149a:	0019      	movs	r1, r3
 800149c:	4b70      	ldr	r3, [pc, #448]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014a4:	f000 fc1e 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 80014a8:	0001      	movs	r1, r0
 80014aa:	4b6d      	ldr	r3, [pc, #436]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	220f      	movs	r2, #15
 80014b2:	4013      	ands	r3, r2
 80014b4:	4a6e      	ldr	r2, [pc, #440]	; (8001670 <HAL_RCC_OscConfig+0x360>)
 80014b6:	5cd3      	ldrb	r3, [r2, r3]
 80014b8:	000a      	movs	r2, r1
 80014ba:	40da      	lsrs	r2, r3
 80014bc:	4b6d      	ldr	r3, [pc, #436]	; (8001674 <HAL_RCC_OscConfig+0x364>)
 80014be:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80014c0:	2513      	movs	r5, #19
 80014c2:	197c      	adds	r4, r7, r5
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff fc4d 	bl	8000d64 <HAL_InitTick>
 80014ca:	0003      	movs	r3, r0
 80014cc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80014ce:	197b      	adds	r3, r7, r5
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d047      	beq.n	8001566 <HAL_RCC_OscConfig+0x256>
      {
        return status;
 80014d6:	2313      	movs	r3, #19
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	e2cd      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d027      	beq.n	8001534 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014e4:	4b5e      	ldr	r3, [pc, #376]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2209      	movs	r2, #9
 80014ea:	4393      	bics	r3, r2
 80014ec:	0019      	movs	r1, r3
 80014ee:	4b5c      	ldr	r3, [pc, #368]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fc7b 	bl	8000df0 <HAL_GetTick>
 80014fa:	0003      	movs	r3, r0
 80014fc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001500:	f7ff fc76 	bl	8000df0 <HAL_GetTick>
 8001504:	0002      	movs	r2, r0
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e2b3      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001512:	4b53      	ldr	r3, [pc, #332]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2204      	movs	r2, #4
 8001518:	4013      	ands	r3, r2
 800151a:	d0f1      	beq.n	8001500 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151c:	4b50      	ldr	r3, [pc, #320]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	4a52      	ldr	r2, [pc, #328]	; (800166c <HAL_RCC_OscConfig+0x35c>)
 8001522:	4013      	ands	r3, r2
 8001524:	0019      	movs	r1, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	021a      	lsls	r2, r3, #8
 800152c:	4b4c      	ldr	r3, [pc, #304]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 800152e:	430a      	orrs	r2, r1
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	e018      	b.n	8001566 <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001534:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b49      	ldr	r3, [pc, #292]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 800153a:	2101      	movs	r1, #1
 800153c:	438a      	bics	r2, r1
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fc56 	bl	8000df0 <HAL_GetTick>
 8001544:	0003      	movs	r3, r0
 8001546:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154a:	f7ff fc51 	bl	8000df0 <HAL_GetTick>
 800154e:	0002      	movs	r2, r0
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e28e      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800155c:	4b40      	ldr	r3, [pc, #256]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2204      	movs	r2, #4
 8001562:	4013      	ands	r3, r2
 8001564:	d1f1      	bne.n	800154a <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2210      	movs	r2, #16
 800156c:	4013      	ands	r3, r2
 800156e:	d100      	bne.n	8001572 <HAL_RCC_OscConfig+0x262>
 8001570:	e09e      	b.n	80016b0 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d13f      	bne.n	80015f8 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001578:	4b39      	ldr	r3, [pc, #228]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d005      	beq.n	8001590 <HAL_RCC_OscConfig+0x280>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e274      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001590:	4b33      	ldr	r3, [pc, #204]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4a38      	ldr	r2, [pc, #224]	; (8001678 <HAL_RCC_OscConfig+0x368>)
 8001596:	4013      	ands	r3, r2
 8001598:	0019      	movs	r1, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800159e:	4b30      	ldr	r3, [pc, #192]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80015a0:	430a      	orrs	r2, r1
 80015a2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a4:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	0a19      	lsrs	r1, r3, #8
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	061a      	lsls	r2, r3, #24
 80015b2:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80015b4:	430a      	orrs	r2, r1
 80015b6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	0b5b      	lsrs	r3, r3, #13
 80015be:	3301      	adds	r3, #1
 80015c0:	2280      	movs	r2, #128	; 0x80
 80015c2:	0212      	lsls	r2, r2, #8
 80015c4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	210f      	movs	r1, #15
 80015ce:	400b      	ands	r3, r1
 80015d0:	4927      	ldr	r1, [pc, #156]	; (8001670 <HAL_RCC_OscConfig+0x360>)
 80015d2:	5ccb      	ldrb	r3, [r1, r3]
 80015d4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015d6:	4b27      	ldr	r3, [pc, #156]	; (8001674 <HAL_RCC_OscConfig+0x364>)
 80015d8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80015da:	2513      	movs	r5, #19
 80015dc:	197c      	adds	r4, r7, r5
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff fbc0 	bl	8000d64 <HAL_InitTick>
 80015e4:	0003      	movs	r3, r0
 80015e6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80015e8:	197b      	adds	r3, r7, r5
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d05f      	beq.n	80016b0 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 80015f0:	2313      	movs	r3, #19
 80015f2:	18fb      	adds	r3, r7, r3
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	e240      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d03d      	beq.n	800167c <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	0049      	lsls	r1, r1, #1
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff fbef 	bl	8000df0 <HAL_GetTick>
 8001612:	0003      	movs	r3, r0
 8001614:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001618:	f7ff fbea 	bl	8000df0 <HAL_GetTick>
 800161c:	0002      	movs	r2, r0
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e227      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4013      	ands	r3, r2
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <HAL_RCC_OscConfig+0x368>)
 800163c:	4013      	ands	r3, r2
 800163e:	0019      	movs	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 8001646:	430a      	orrs	r2, r1
 8001648:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	0a19      	lsrs	r1, r3, #8
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	061a      	lsls	r2, r3, #24
 8001658:	4b01      	ldr	r3, [pc, #4]	; (8001660 <HAL_RCC_OscConfig+0x350>)
 800165a:	430a      	orrs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	e027      	b.n	80016b0 <HAL_RCC_OscConfig+0x3a0>
 8001660:	40021000 	.word	0x40021000
 8001664:	fffeffff 	.word	0xfffeffff
 8001668:	fffbffff 	.word	0xfffbffff
 800166c:	ffffe0ff 	.word	0xffffe0ff
 8001670:	08003e08 	.word	0x08003e08
 8001674:	20000000 	.word	0x20000000
 8001678:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800167c:	4bbd      	ldr	r3, [pc, #756]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4bbc      	ldr	r3, [pc, #752]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 8001682:	49bd      	ldr	r1, [pc, #756]	; (8001978 <HAL_RCC_OscConfig+0x668>)
 8001684:	400a      	ands	r2, r1
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fbb2 	bl	8000df0 <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001692:	f7ff fbad 	bl	8000df0 <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e1ea      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016a4:	4bb3      	ldr	r3, [pc, #716]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4013      	ands	r3, r2
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2208      	movs	r2, #8
 80016b6:	4013      	ands	r3, r2
 80016b8:	d036      	beq.n	8001728 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d019      	beq.n	80016f6 <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c2:	4bac      	ldr	r3, [pc, #688]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80016c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016c6:	4bab      	ldr	r3, [pc, #684]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80016c8:	2101      	movs	r1, #1
 80016ca:	430a      	orrs	r2, r1
 80016cc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ce:	f7ff fb8f 	bl	8000df0 <HAL_GetTick>
 80016d2:	0003      	movs	r3, r0
 80016d4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d8:	f7ff fb8a 	bl	8000df0 <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1c7      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016ea:	4ba2      	ldr	r3, [pc, #648]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80016ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ee:	2202      	movs	r2, #2
 80016f0:	4013      	ands	r3, r2
 80016f2:	d0f1      	beq.n	80016d8 <HAL_RCC_OscConfig+0x3c8>
 80016f4:	e018      	b.n	8001728 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f6:	4b9f      	ldr	r3, [pc, #636]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80016f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016fa:	4b9e      	ldr	r3, [pc, #632]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80016fc:	2101      	movs	r1, #1
 80016fe:	438a      	bics	r2, r1
 8001700:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001702:	f7ff fb75 	bl	8000df0 <HAL_GetTick>
 8001706:	0003      	movs	r3, r0
 8001708:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800170c:	f7ff fb70 	bl	8000df0 <HAL_GetTick>
 8001710:	0002      	movs	r2, r0
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e1ad      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800171e:	4b95      	ldr	r3, [pc, #596]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 8001720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001722:	2202      	movs	r2, #2
 8001724:	4013      	ands	r3, r2
 8001726:	d1f1      	bne.n	800170c <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2204      	movs	r2, #4
 800172e:	4013      	ands	r3, r2
 8001730:	d100      	bne.n	8001734 <HAL_RCC_OscConfig+0x424>
 8001732:	e0af      	b.n	8001894 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001734:	2327      	movs	r3, #39	; 0x27
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173c:	4b8d      	ldr	r3, [pc, #564]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 800173e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	055b      	lsls	r3, r3, #21
 8001744:	4013      	ands	r3, r2
 8001746:	d10a      	bne.n	800175e <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001748:	4b8a      	ldr	r3, [pc, #552]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 800174a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800174c:	4b89      	ldr	r3, [pc, #548]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 800174e:	2180      	movs	r1, #128	; 0x80
 8001750:	0549      	lsls	r1, r1, #21
 8001752:	430a      	orrs	r2, r1
 8001754:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001756:	2327      	movs	r3, #39	; 0x27
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175e:	4b87      	ldr	r3, [pc, #540]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4013      	ands	r3, r2
 8001768:	d11a      	bne.n	80017a0 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176a:	4b84      	ldr	r3, [pc, #528]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b83      	ldr	r3, [pc, #524]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	0049      	lsls	r1, r1, #1
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001778:	f7ff fb3a 	bl	8000df0 <HAL_GetTick>
 800177c:	0003      	movs	r3, r0
 800177e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001782:	f7ff fb35 	bl	8000df0 <HAL_GetTick>
 8001786:	0002      	movs	r2, r0
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b64      	cmp	r3, #100	; 0x64
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e172      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	4b79      	ldr	r3, [pc, #484]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4013      	ands	r3, r2
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_OscConfig+0x4ac>
 80017ac:	4b71      	ldr	r3, [pc, #452]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80017ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017b0:	4b70      	ldr	r3, [pc, #448]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80017b2:	2180      	movs	r1, #128	; 0x80
 80017b4:	0049      	lsls	r1, r1, #1
 80017b6:	430a      	orrs	r2, r1
 80017b8:	651a      	str	r2, [r3, #80]	; 0x50
 80017ba:	e031      	b.n	8001820 <HAL_RCC_OscConfig+0x510>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10c      	bne.n	80017de <HAL_RCC_OscConfig+0x4ce>
 80017c4:	4b6b      	ldr	r3, [pc, #428]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80017c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017c8:	4b6a      	ldr	r3, [pc, #424]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80017ca:	496b      	ldr	r1, [pc, #428]	; (8001978 <HAL_RCC_OscConfig+0x668>)
 80017cc:	400a      	ands	r2, r1
 80017ce:	651a      	str	r2, [r3, #80]	; 0x50
 80017d0:	4b68      	ldr	r3, [pc, #416]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80017d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017d4:	4b67      	ldr	r3, [pc, #412]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80017d6:	496a      	ldr	r1, [pc, #424]	; (8001980 <HAL_RCC_OscConfig+0x670>)
 80017d8:	400a      	ands	r2, r1
 80017da:	651a      	str	r2, [r3, #80]	; 0x50
 80017dc:	e020      	b.n	8001820 <HAL_RCC_OscConfig+0x510>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	23a0      	movs	r3, #160	; 0xa0
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d10e      	bne.n	8001808 <HAL_RCC_OscConfig+0x4f8>
 80017ea:	4b62      	ldr	r3, [pc, #392]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80017ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ee:	4b61      	ldr	r3, [pc, #388]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	00c9      	lsls	r1, r1, #3
 80017f4:	430a      	orrs	r2, r1
 80017f6:	651a      	str	r2, [r3, #80]	; 0x50
 80017f8:	4b5e      	ldr	r3, [pc, #376]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80017fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017fc:	4b5d      	ldr	r3, [pc, #372]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80017fe:	2180      	movs	r1, #128	; 0x80
 8001800:	0049      	lsls	r1, r1, #1
 8001802:	430a      	orrs	r2, r1
 8001804:	651a      	str	r2, [r3, #80]	; 0x50
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0x510>
 8001808:	4b5a      	ldr	r3, [pc, #360]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 800180a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800180c:	4b59      	ldr	r3, [pc, #356]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 800180e:	495a      	ldr	r1, [pc, #360]	; (8001978 <HAL_RCC_OscConfig+0x668>)
 8001810:	400a      	ands	r2, r1
 8001812:	651a      	str	r2, [r3, #80]	; 0x50
 8001814:	4b57      	ldr	r3, [pc, #348]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 8001816:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001818:	4b56      	ldr	r3, [pc, #344]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 800181a:	4959      	ldr	r1, [pc, #356]	; (8001980 <HAL_RCC_OscConfig+0x670>)
 800181c:	400a      	ands	r2, r1
 800181e:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d015      	beq.n	8001854 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001828:	f7ff fae2 	bl	8000df0 <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001830:	e009      	b.n	8001846 <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001832:	f7ff fadd 	bl	8000df0 <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	4a51      	ldr	r2, [pc, #324]	; (8001984 <HAL_RCC_OscConfig+0x674>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e119      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001846:	4b4b      	ldr	r3, [pc, #300]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 8001848:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4013      	ands	r3, r2
 8001850:	d0ef      	beq.n	8001832 <HAL_RCC_OscConfig+0x522>
 8001852:	e014      	b.n	800187e <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001854:	f7ff facc 	bl	8000df0 <HAL_GetTick>
 8001858:	0003      	movs	r3, r0
 800185a:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800185c:	e009      	b.n	8001872 <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7ff fac7 	bl	8000df0 <HAL_GetTick>
 8001862:	0002      	movs	r2, r0
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	4a46      	ldr	r2, [pc, #280]	; (8001984 <HAL_RCC_OscConfig+0x674>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e103      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001872:	4b40      	ldr	r3, [pc, #256]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 8001874:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4013      	ands	r3, r2
 800187c:	d1ef      	bne.n	800185e <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800187e:	2327      	movs	r3, #39	; 0x27
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d105      	bne.n	8001894 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001888:	4b3a      	ldr	r3, [pc, #232]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 800188a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 800188e:	493e      	ldr	r1, [pc, #248]	; (8001988 <HAL_RCC_OscConfig+0x678>)
 8001890:	400a      	ands	r2, r1
 8001892:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2220      	movs	r2, #32
 800189a:	4013      	ands	r3, r2
 800189c:	d049      	beq.n	8001932 <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d026      	beq.n	80018f4 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80018a6:	4b33      	ldr	r3, [pc, #204]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	4b32      	ldr	r3, [pc, #200]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80018ac:	2101      	movs	r1, #1
 80018ae:	430a      	orrs	r2, r1
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	4b30      	ldr	r3, [pc, #192]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80018b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b6:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80018b8:	2101      	movs	r1, #1
 80018ba:	430a      	orrs	r2, r1
 80018bc:	635a      	str	r2, [r3, #52]	; 0x34
 80018be:	4b33      	ldr	r3, [pc, #204]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 80018c0:	6a1a      	ldr	r2, [r3, #32]
 80018c2:	4b32      	ldr	r3, [pc, #200]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 80018c4:	2180      	movs	r1, #128	; 0x80
 80018c6:	0189      	lsls	r1, r1, #6
 80018c8:	430a      	orrs	r2, r1
 80018ca:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fa90 	bl	8000df0 <HAL_GetTick>
 80018d0:	0003      	movs	r3, r0
 80018d2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018d6:	f7ff fa8b 	bl	8000df0 <HAL_GetTick>
 80018da:	0002      	movs	r2, r0
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e0c8      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2202      	movs	r2, #2
 80018ee:	4013      	ands	r3, r2
 80018f0:	d0f1      	beq.n	80018d6 <HAL_RCC_OscConfig+0x5c6>
 80018f2:	e01e      	b.n	8001932 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	438a      	bics	r2, r1
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001902:	6a1a      	ldr	r2, [r3, #32]
 8001904:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001906:	4922      	ldr	r1, [pc, #136]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 8001908:	400a      	ands	r2, r1
 800190a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fa70 	bl	8000df0 <HAL_GetTick>
 8001910:	0003      	movs	r3, r0
 8001912:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001916:	f7ff fa6b 	bl	8000df0 <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e0a8      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2202      	movs	r2, #2
 800192e:	4013      	ands	r3, r2
 8001930:	d1f1      	bne.n	8001916 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	2b00      	cmp	r3, #0
 8001938:	d100      	bne.n	800193c <HAL_RCC_OscConfig+0x62c>
 800193a:	e09d      	b.n	8001a78 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d100      	bne.n	8001944 <HAL_RCC_OscConfig+0x634>
 8001942:	e076      	b.n	8001a32 <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	2b02      	cmp	r3, #2
 800194a:	d157      	bne.n	80019fc <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <HAL_RCC_OscConfig+0x664>)
 8001952:	4910      	ldr	r1, [pc, #64]	; (8001994 <HAL_RCC_OscConfig+0x684>)
 8001954:	400a      	ands	r2, r1
 8001956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fa4a 	bl	8000df0 <HAL_GetTick>
 800195c:	0003      	movs	r3, r0
 800195e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001960:	e01a      	b.n	8001998 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001962:	f7ff fa45 	bl	8000df0 <HAL_GetTick>
 8001966:	0002      	movs	r2, r0
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d913      	bls.n	8001998 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e082      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
 8001974:	40021000 	.word	0x40021000
 8001978:	fffffeff 	.word	0xfffffeff
 800197c:	40007000 	.word	0x40007000
 8001980:	fffffbff 	.word	0xfffffbff
 8001984:	00001388 	.word	0x00001388
 8001988:	efffffff 	.word	0xefffffff
 800198c:	40010000 	.word	0x40010000
 8001990:	ffffdfff 	.word	0xffffdfff
 8001994:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001998:	4b3a      	ldr	r3, [pc, #232]	; (8001a84 <HAL_RCC_OscConfig+0x774>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	049b      	lsls	r3, r3, #18
 80019a0:	4013      	ands	r3, r2
 80019a2:	d1de      	bne.n	8001962 <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a4:	4b37      	ldr	r3, [pc, #220]	; (8001a84 <HAL_RCC_OscConfig+0x774>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4a37      	ldr	r2, [pc, #220]	; (8001a88 <HAL_RCC_OscConfig+0x778>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019bc:	431a      	orrs	r2, r3
 80019be:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <HAL_RCC_OscConfig+0x774>)
 80019c0:	430a      	orrs	r2, r1
 80019c2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c4:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <HAL_RCC_OscConfig+0x774>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b2e      	ldr	r3, [pc, #184]	; (8001a84 <HAL_RCC_OscConfig+0x774>)
 80019ca:	2180      	movs	r1, #128	; 0x80
 80019cc:	0449      	lsls	r1, r1, #17
 80019ce:	430a      	orrs	r2, r1
 80019d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d2:	f7ff fa0d 	bl	8000df0 <HAL_GetTick>
 80019d6:	0003      	movs	r3, r0
 80019d8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff fa08 	bl	8000df0 <HAL_GetTick>
 80019e0:	0002      	movs	r2, r0
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e045      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019ee:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <HAL_RCC_OscConfig+0x774>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	049b      	lsls	r3, r3, #18
 80019f6:	4013      	ands	r3, r2
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x6cc>
 80019fa:	e03d      	b.n	8001a78 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fc:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <HAL_RCC_OscConfig+0x774>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_RCC_OscConfig+0x774>)
 8001a02:	4922      	ldr	r1, [pc, #136]	; (8001a8c <HAL_RCC_OscConfig+0x77c>)
 8001a04:	400a      	ands	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff f9f2 	bl	8000df0 <HAL_GetTick>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff f9ed 	bl	8000df0 <HAL_GetTick>
 8001a16:	0002      	movs	r2, r0
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e02a      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <HAL_RCC_OscConfig+0x774>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	049b      	lsls	r3, r3, #18
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x702>
 8001a30:	e022      	b.n	8001a78 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e01d      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_RCC_OscConfig+0x774>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	025b      	lsls	r3, r3, #9
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d10f      	bne.n	8001a74 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a54:	69fa      	ldr	r2, [r7, #28]
 8001a56:	23f0      	movs	r3, #240	; 0xf0
 8001a58:	039b      	lsls	r3, r3, #14
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d107      	bne.n	8001a74 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a64:	69fa      	ldr	r2, [r7, #28]
 8001a66:	23c0      	movs	r3, #192	; 0xc0
 8001a68:	041b      	lsls	r3, r3, #16
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b00a      	add	sp, #40	; 0x28
 8001a80:	bdb0      	pop	{r4, r5, r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	40021000 	.word	0x40021000
 8001a88:	ff02ffff 	.word	0xff02ffff
 8001a8c:	feffffff 	.word	0xfeffffff

08001a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a90:	b5b0      	push	{r4, r5, r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e10d      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b88      	ldr	r3, [pc, #544]	; (8001cc8 <HAL_RCC_ClockConfig+0x238>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4013      	ands	r3, r2
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d911      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b85      	ldr	r3, [pc, #532]	; (8001cc8 <HAL_RCC_ClockConfig+0x238>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4393      	bics	r3, r2
 8001aba:	0019      	movs	r1, r3
 8001abc:	4b82      	ldr	r3, [pc, #520]	; (8001cc8 <HAL_RCC_ClockConfig+0x238>)
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac4:	4b80      	ldr	r3, [pc, #512]	; (8001cc8 <HAL_RCC_ClockConfig+0x238>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4013      	ands	r3, r2
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d001      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e0f4      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2202      	movs	r2, #2
 8001adc:	4013      	ands	r3, r2
 8001ade:	d009      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae0:	4b7a      	ldr	r3, [pc, #488]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	22f0      	movs	r2, #240	; 0xf0
 8001ae6:	4393      	bics	r3, r2
 8001ae8:	0019      	movs	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	4b77      	ldr	r3, [pc, #476]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001af0:	430a      	orrs	r2, r1
 8001af2:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2201      	movs	r2, #1
 8001afa:	4013      	ands	r3, r2
 8001afc:	d100      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x70>
 8001afe:	e089      	b.n	8001c14 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b08:	4b70      	ldr	r3, [pc, #448]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	029b      	lsls	r3, r3, #10
 8001b10:	4013      	ands	r3, r2
 8001b12:	d120      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0d3      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b20:	4b6a      	ldr	r3, [pc, #424]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	049b      	lsls	r3, r3, #18
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d114      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0c7      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b38:	4b64      	ldr	r3, [pc, #400]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d109      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e0bc      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b46:	4b61      	ldr	r3, [pc, #388]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e0b4      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b56:	4b5d      	ldr	r3, [pc, #372]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	4393      	bics	r3, r2
 8001b5e:	0019      	movs	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	4b59      	ldr	r3, [pc, #356]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001b66:	430a      	orrs	r2, r1
 8001b68:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b6a:	f7ff f941 	bl	8000df0 <HAL_GetTick>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d111      	bne.n	8001b9e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b7a:	e009      	b.n	8001b90 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7c:	f7ff f938 	bl	8000df0 <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	4a52      	ldr	r2, [pc, #328]	; (8001cd0 <HAL_RCC_ClockConfig+0x240>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e097      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b90:	4b4e      	ldr	r3, [pc, #312]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	220c      	movs	r2, #12
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d1ef      	bne.n	8001b7c <HAL_RCC_ClockConfig+0xec>
 8001b9c:	e03a      	b.n	8001c14 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d111      	bne.n	8001bca <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba6:	e009      	b.n	8001bbc <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba8:	f7ff f922 	bl	8000df0 <HAL_GetTick>
 8001bac:	0002      	movs	r2, r0
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	4a47      	ldr	r2, [pc, #284]	; (8001cd0 <HAL_RCC_ClockConfig+0x240>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e081      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bbc:	4b43      	ldr	r3, [pc, #268]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	220c      	movs	r2, #12
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b0c      	cmp	r3, #12
 8001bc6:	d1ef      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x118>
 8001bc8:	e024      	b.n	8001c14 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d11b      	bne.n	8001c0a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bd2:	e009      	b.n	8001be8 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd4:	f7ff f90c 	bl	8000df0 <HAL_GetTick>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	4a3c      	ldr	r2, [pc, #240]	; (8001cd0 <HAL_RCC_ClockConfig+0x240>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e06b      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001be8:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	220c      	movs	r2, #12
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d1ef      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x144>
 8001bf4:	e00e      	b.n	8001c14 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf6:	f7ff f8fb 	bl	8000df0 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	4a33      	ldr	r2, [pc, #204]	; (8001cd0 <HAL_RCC_ClockConfig+0x240>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e05a      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c0a:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	220c      	movs	r2, #12
 8001c10:	4013      	ands	r3, r2
 8001c12:	d1f0      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c14:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <HAL_RCC_ClockConfig+0x238>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d211      	bcs.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <HAL_RCC_ClockConfig+0x238>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2201      	movs	r2, #1
 8001c28:	4393      	bics	r3, r2
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <HAL_RCC_ClockConfig+0x238>)
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c34:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <HAL_RCC_ClockConfig+0x238>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d001      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e03c      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d009      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	0019      	movs	r1, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001c60:	430a      	orrs	r2, r1
 8001c62:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2208      	movs	r2, #8
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d00a      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <HAL_RCC_ClockConfig+0x248>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	0019      	movs	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	00da      	lsls	r2, r3, #3
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001c80:	430a      	orrs	r2, r1
 8001c82:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c84:	f000 f82e 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001c88:	0001      	movs	r1, r0
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_RCC_ClockConfig+0x23c>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	220f      	movs	r2, #15
 8001c92:	4013      	ands	r3, r2
 8001c94:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <HAL_RCC_ClockConfig+0x24c>)
 8001c96:	5cd3      	ldrb	r3, [r2, r3]
 8001c98:	000a      	movs	r2, r1
 8001c9a:	40da      	lsrs	r2, r3
 8001c9c:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_RCC_ClockConfig+0x250>)
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001ca0:	250b      	movs	r5, #11
 8001ca2:	197c      	adds	r4, r7, r5
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7ff f85d 	bl	8000d64 <HAL_InitTick>
 8001caa:	0003      	movs	r3, r0
 8001cac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001cae:	197b      	adds	r3, r7, r5
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001cb6:	230b      	movs	r3, #11
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	e000      	b.n	8001cc0 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b004      	add	sp, #16
 8001cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc8:	40022000 	.word	0x40022000
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	00001388 	.word	0x00001388
 8001cd4:	fffff8ff 	.word	0xfffff8ff
 8001cd8:	ffffc7ff 	.word	0xffffc7ff
 8001cdc:	08003e08 	.word	0x08003e08
 8001ce0:	20000000 	.word	0x20000000

08001ce4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001cea:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d00e      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x34>
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d00f      	beq.n	8001d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d157      	bne.n	8001db2 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d02:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2210      	movs	r2, #16
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d002      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d0c:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d0e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d10:	e05d      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001d12:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d14:	613b      	str	r3, [r7, #16]
      break;
 8001d16:	e05a      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d1a:	613b      	str	r3, [r7, #16]
      break;
 8001d1c:	e057      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	0c9b      	lsrs	r3, r3, #18
 8001d22:	220f      	movs	r2, #15
 8001d24:	4013      	ands	r3, r2
 8001d26:	4a30      	ldr	r2, [pc, #192]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d28:	5cd3      	ldrb	r3, [r2, r3]
 8001d2a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	0d9b      	lsrs	r3, r3, #22
 8001d30:	2203      	movs	r2, #3
 8001d32:	4013      	ands	r3, r2
 8001d34:	3301      	adds	r3, #1
 8001d36:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	025b      	lsls	r3, r3, #9
 8001d40:	4013      	ands	r3, r2
 8001d42:	d00f      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	000a      	movs	r2, r1
 8001d48:	0152      	lsls	r2, r2, #5
 8001d4a:	1a52      	subs	r2, r2, r1
 8001d4c:	0193      	lsls	r3, r2, #6
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	185b      	adds	r3, r3, r1
 8001d54:	025b      	lsls	r3, r3, #9
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f7fe f9d5 	bl	8000108 <__udivsi3>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	e023      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d64:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2210      	movs	r2, #16
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d00f      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	000a      	movs	r2, r1
 8001d72:	0152      	lsls	r2, r2, #5
 8001d74:	1a52      	subs	r2, r2, r1
 8001d76:	0193      	lsls	r3, r2, #6
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	185b      	adds	r3, r3, r1
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	0018      	movs	r0, r3
 8001d84:	f7fe f9c0 	bl	8000108 <__udivsi3>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	e00e      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001d8e:	68b9      	ldr	r1, [r7, #8]
 8001d90:	000a      	movs	r2, r1
 8001d92:	0152      	lsls	r2, r2, #5
 8001d94:	1a52      	subs	r2, r2, r1
 8001d96:	0193      	lsls	r3, r2, #6
 8001d98:	1a9b      	subs	r3, r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	185b      	adds	r3, r3, r1
 8001d9e:	029b      	lsls	r3, r3, #10
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	0018      	movs	r0, r3
 8001da4:	f7fe f9b0 	bl	8000108 <__udivsi3>
 8001da8:	0003      	movs	r3, r0
 8001daa:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	613b      	str	r3, [r7, #16]
      break;
 8001db0:	e00d      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	0b5b      	lsrs	r3, r3, #13
 8001db8:	2207      	movs	r2, #7
 8001dba:	4013      	ands	r3, r2
 8001dbc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	2280      	movs	r2, #128	; 0x80
 8001dc4:	0212      	lsls	r2, r2, #8
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	0013      	movs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
      break;
 8001dcc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001dce:	693b      	ldr	r3, [r7, #16]
}
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b006      	add	sp, #24
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	003d0900 	.word	0x003d0900
 8001de0:	00f42400 	.word	0x00f42400
 8001de4:	007a1200 	.word	0x007a1200
 8001de8:	08003e20 	.word	0x08003e20

08001dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df0:	4b02      	ldr	r3, [pc, #8]	; (8001dfc <HAL_RCC_GetHCLKFreq+0x10>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	0018      	movs	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	20000000 	.word	0x20000000

08001e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e04:	f7ff fff2 	bl	8001dec <HAL_RCC_GetHCLKFreq>
 8001e08:	0001      	movs	r1, r0
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	2207      	movs	r2, #7
 8001e12:	4013      	ands	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e16:	5cd3      	ldrb	r3, [r2, r3]
 8001e18:	40d9      	lsrs	r1, r3
 8001e1a:	000b      	movs	r3, r1
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	40021000 	.word	0x40021000
 8001e28:	08003e18 	.word	0x08003e18

08001e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e30:	f7ff ffdc 	bl	8001dec <HAL_RCC_GetHCLKFreq>
 8001e34:	0001      	movs	r1, r0
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	0adb      	lsrs	r3, r3, #11
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4013      	ands	r3, r2
 8001e40:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e42:	5cd3      	ldrb	r3, [r2, r3]
 8001e44:	40d9      	lsrs	r1, r3
 8001e46:	000b      	movs	r3, r1
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	40021000 	.word	0x40021000
 8001e54:	08003e18 	.word	0x08003e18

08001e58 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2220      	movs	r2, #32
 8001e66:	4013      	ands	r3, r2
 8001e68:	d106      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	4013      	ands	r3, r2
 8001e74:	d100      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8001e76:	e0dd      	b.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001e78:	2317      	movs	r3, #23
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e80:	4b9c      	ldr	r3, [pc, #624]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	055b      	lsls	r3, r3, #21
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d10a      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8c:	4b99      	ldr	r3, [pc, #612]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e90:	4b98      	ldr	r3, [pc, #608]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e92:	2180      	movs	r1, #128	; 0x80
 8001e94:	0549      	lsls	r1, r1, #21
 8001e96:	430a      	orrs	r2, r1
 8001e98:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e9a:	2317      	movs	r3, #23
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	4b95      	ldr	r3, [pc, #596]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d11a      	bne.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eae:	4b92      	ldr	r3, [pc, #584]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4b91      	ldr	r3, [pc, #580]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	0049      	lsls	r1, r1, #1
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebc:	f7fe ff98 	bl	8000df0 <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec6:	f7fe ff93 	bl	8000df0 <HAL_GetTick>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b64      	cmp	r3, #100	; 0x64
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e108      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	4b87      	ldr	r3, [pc, #540]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001ee4:	4b83      	ldr	r3, [pc, #524]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	23c0      	movs	r3, #192	; 0xc0
 8001eea:	039b      	lsls	r3, r3, #14
 8001eec:	4013      	ands	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	23c0      	movs	r3, #192	; 0xc0
 8001ef6:	039b      	lsls	r3, r3, #14
 8001ef8:	4013      	ands	r3, r2
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d107      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	23c0      	movs	r3, #192	; 0xc0
 8001f06:	039b      	lsls	r3, r3, #14
 8001f08:	4013      	ands	r3, r2
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d013      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	23c0      	movs	r3, #192	; 0xc0
 8001f16:	029b      	lsls	r3, r3, #10
 8001f18:	401a      	ands	r2, r3
 8001f1a:	23c0      	movs	r3, #192	; 0xc0
 8001f1c:	029b      	lsls	r3, r3, #10
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d10a      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001f22:	4b74      	ldr	r3, [pc, #464]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	029b      	lsls	r3, r3, #10
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	029b      	lsls	r3, r3, #10
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d101      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0d8      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001f38:	4b6e      	ldr	r3, [pc, #440]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f3c:	23c0      	movs	r3, #192	; 0xc0
 8001f3e:	029b      	lsls	r3, r3, #10
 8001f40:	4013      	ands	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d049      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	23c0      	movs	r3, #192	; 0xc0
 8001f50:	029b      	lsls	r3, r3, #10
 8001f52:	4013      	ands	r3, r2
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d004      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	4013      	ands	r3, r2
 8001f62:	d10d      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	23c0      	movs	r3, #192	; 0xc0
 8001f6a:	029b      	lsls	r3, r3, #10
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d034      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d02e      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001f80:	4b5c      	ldr	r3, [pc, #368]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f84:	4a5d      	ldr	r2, [pc, #372]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f8a:	4b5a      	ldr	r3, [pc, #360]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f8e:	4b59      	ldr	r3, [pc, #356]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f90:	2180      	movs	r1, #128	; 0x80
 8001f92:	0309      	lsls	r1, r1, #12
 8001f94:	430a      	orrs	r2, r1
 8001f96:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f98:	4b56      	ldr	r3, [pc, #344]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f9c:	4b55      	ldr	r3, [pc, #340]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f9e:	4958      	ldr	r1, [pc, #352]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001fa0:	400a      	ands	r2, r1
 8001fa2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001fa4:	4b53      	ldr	r3, [pc, #332]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d014      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7fe ff1c 	bl	8000df0 <HAL_GetTick>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fbc:	e009      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7fe ff17 	bl	8000df0 <HAL_GetTick>
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	4a4e      	ldr	r2, [pc, #312]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e08b      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fd2:	4b48      	ldr	r3, [pc, #288]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001fd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d0ef      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	23c0      	movs	r3, #192	; 0xc0
 8001fe4:	029b      	lsls	r3, r3, #10
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	23c0      	movs	r3, #192	; 0xc0
 8001fea:	029b      	lsls	r3, r3, #10
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d10c      	bne.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001ff0:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a44      	ldr	r2, [pc, #272]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	23c0      	movs	r3, #192	; 0xc0
 8002000:	039b      	lsls	r3, r3, #14
 8002002:	401a      	ands	r2, r3
 8002004:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002006:	430a      	orrs	r2, r1
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800200c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	23c0      	movs	r3, #192	; 0xc0
 8002014:	029b      	lsls	r3, r3, #10
 8002016:	401a      	ands	r2, r3
 8002018:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800201a:	430a      	orrs	r2, r1
 800201c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800201e:	2317      	movs	r3, #23
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d105      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002028:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800202a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800202e:	4937      	ldr	r1, [pc, #220]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002030:	400a      	ands	r2, r1
 8002032:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2201      	movs	r2, #1
 800203a:	4013      	ands	r3, r2
 800203c:	d009      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800203e:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	2203      	movs	r2, #3
 8002044:	4393      	bics	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800204e:	430a      	orrs	r2, r1
 8002050:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2202      	movs	r2, #2
 8002058:	4013      	ands	r3, r2
 800205a:	d009      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800205e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002060:	220c      	movs	r2, #12
 8002062:	4393      	bics	r3, r2
 8002064:	0019      	movs	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800206c:	430a      	orrs	r2, r1
 800206e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2204      	movs	r2, #4
 8002076:	4013      	ands	r3, r2
 8002078:	d009      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	4a24      	ldr	r2, [pc, #144]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002080:	4013      	ands	r3, r2
 8002082:	0019      	movs	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800208a:	430a      	orrs	r2, r1
 800208c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2208      	movs	r2, #8
 8002094:	4013      	ands	r3, r2
 8002096:	d009      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209c:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800209e:	4013      	ands	r3, r2
 80020a0:	0019      	movs	r1, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80020a8:	430a      	orrs	r2, r1
 80020aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2240      	movs	r2, #64	; 0x40
 80020b2:	4013      	ands	r3, r2
 80020b4:	d009      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	4a17      	ldr	r2, [pc, #92]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80020bc:	4013      	ands	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1a      	ldr	r2, [r3, #32]
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2280      	movs	r2, #128	; 0x80
 80020d0:	4013      	ands	r3, r2
 80020d2:	d009      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	4a10      	ldr	r2, [pc, #64]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80020e4:	430a      	orrs	r2, r1
 80020e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b006      	add	sp, #24
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40007000 	.word	0x40007000
 80020fc:	fffcffff 	.word	0xfffcffff
 8002100:	fff7ffff 	.word	0xfff7ffff
 8002104:	00001388 	.word	0x00001388
 8002108:	ffcfffff 	.word	0xffcfffff
 800210c:	efffffff 	.word	0xefffffff
 8002110:	fffff3ff 	.word	0xfffff3ff
 8002114:	ffffcfff 	.word	0xffffcfff
 8002118:	fbffffff 	.word	0xfbffffff
 800211c:	fff3ffff 	.word	0xfff3ffff

08002120 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e08e      	b.n	8002250 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2221      	movs	r2, #33	; 0x21
 8002136:	5c9b      	ldrb	r3, [r3, r2]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d107      	bne.n	800214e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2220      	movs	r2, #32
 8002142:	2100      	movs	r1, #0
 8002144:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	0018      	movs	r0, r3
 800214a:	f7fe fc8f 	bl	8000a6c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2221      	movs	r2, #33	; 0x21
 8002152:	2102      	movs	r1, #2
 8002154:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	22ca      	movs	r2, #202	; 0xca
 800215c:	625a      	str	r2, [r3, #36]	; 0x24
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2253      	movs	r2, #83	; 0x53
 8002164:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	0018      	movs	r0, r3
 800216a:	f000 f948 	bl	80023fe <RTC_EnterInitMode>
 800216e:	1e03      	subs	r3, r0, #0
 8002170:	d009      	beq.n	8002186 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	22ff      	movs	r2, #255	; 0xff
 8002178:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2221      	movs	r2, #33	; 0x21
 800217e:	2104      	movs	r1, #4
 8002180:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e064      	b.n	8002250 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4931      	ldr	r1, [pc, #196]	; (8002258 <HAL_RTC_Init+0x138>)
 8002192:	400a      	ands	r2, r1
 8002194:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6899      	ldr	r1, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68d2      	ldr	r2, [r2, #12]
 80021bc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6919      	ldr	r1, [r3, #16]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	041a      	lsls	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2180      	movs	r1, #128	; 0x80
 80021de:	438a      	bics	r2, r1
 80021e0:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2103      	movs	r1, #3
 80021ee:	438a      	bics	r2, r1
 80021f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69da      	ldr	r2, [r3, #28]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2220      	movs	r2, #32
 8002212:	4013      	ands	r3, r2
 8002214:	d113      	bne.n	800223e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0018      	movs	r0, r3
 800221a:	f000 f8c9 	bl	80023b0 <HAL_RTC_WaitForSynchro>
 800221e:	1e03      	subs	r3, r0, #0
 8002220:	d00d      	beq.n	800223e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	22ff      	movs	r2, #255	; 0xff
 8002228:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2221      	movs	r2, #33	; 0x21
 800222e:	2104      	movs	r1, #4
 8002230:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2220      	movs	r2, #32
 8002236:	2100      	movs	r1, #0
 8002238:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e008      	b.n	8002250 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	22ff      	movs	r2, #255	; 0xff
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2221      	movs	r2, #33	; 0x21
 800224a:	2101      	movs	r1, #1
 800224c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800224e:	2300      	movs	r3, #0
  }
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b002      	add	sp, #8
 8002256:	bd80      	pop	{r7, pc}
 8002258:	ff8fffbf 	.word	0xff8fffbf

0800225c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	045b      	lsls	r3, r3, #17
 800227a:	0c5a      	lsrs	r2, r3, #17
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a22      	ldr	r2, [pc, #136]	; (8002310 <HAL_RTC_GetTime+0xb4>)
 8002288:	4013      	ands	r3, r2
 800228a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	0c1b      	lsrs	r3, r3, #16
 8002290:	b2db      	uxtb	r3, r3
 8002292:	223f      	movs	r2, #63	; 0x3f
 8002294:	4013      	ands	r3, r2
 8002296:	b2da      	uxtb	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	227f      	movs	r2, #127	; 0x7f
 80022a4:	4013      	ands	r3, r2
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	227f      	movs	r2, #127	; 0x7f
 80022b2:	4013      	ands	r3, r2
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	0c1b      	lsrs	r3, r3, #16
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2240      	movs	r2, #64	; 0x40
 80022c2:	4013      	ands	r3, r2
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d11a      	bne.n	8002306 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	0018      	movs	r0, r3
 80022d6:	f000 f8bc 	bl	8002452 <RTC_Bcd2ToByte>
 80022da:	0003      	movs	r3, r0
 80022dc:	001a      	movs	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	785b      	ldrb	r3, [r3, #1]
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 f8b3 	bl	8002452 <RTC_Bcd2ToByte>
 80022ec:	0003      	movs	r3, r0
 80022ee:	001a      	movs	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	789b      	ldrb	r3, [r3, #2]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f000 f8aa 	bl	8002452 <RTC_Bcd2ToByte>
 80022fe:	0003      	movs	r3, r0
 8002300:	001a      	movs	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	b006      	add	sp, #24
 800230e:	bd80      	pop	{r7, pc}
 8002310:	007f7f7f 	.word	0x007f7f7f

08002314 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4a21      	ldr	r2, [pc, #132]	; (80023ac <HAL_RTC_GetDate+0x98>)
 8002328:	4013      	ands	r3, r2
 800232a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	0c1b      	lsrs	r3, r3, #16
 8002330:	b2da      	uxtb	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	b2db      	uxtb	r3, r3
 800233c:	221f      	movs	r2, #31
 800233e:	4013      	ands	r3, r2
 8002340:	b2da      	uxtb	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	223f      	movs	r2, #63	; 0x3f
 800234c:	4013      	ands	r3, r2
 800234e:	b2da      	uxtb	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	0b5b      	lsrs	r3, r3, #13
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2207      	movs	r2, #7
 800235c:	4013      	ands	r3, r2
 800235e:	b2da      	uxtb	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d11a      	bne.n	80023a0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	78db      	ldrb	r3, [r3, #3]
 800236e:	0018      	movs	r0, r3
 8002370:	f000 f86f 	bl	8002452 <RTC_Bcd2ToByte>
 8002374:	0003      	movs	r3, r0
 8002376:	001a      	movs	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	785b      	ldrb	r3, [r3, #1]
 8002380:	0018      	movs	r0, r3
 8002382:	f000 f866 	bl	8002452 <RTC_Bcd2ToByte>
 8002386:	0003      	movs	r3, r0
 8002388:	001a      	movs	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	789b      	ldrb	r3, [r3, #2]
 8002392:	0018      	movs	r0, r3
 8002394:	f000 f85d 	bl	8002452 <RTC_Bcd2ToByte>
 8002398:	0003      	movs	r3, r0
 800239a:	001a      	movs	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	0018      	movs	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b006      	add	sp, #24
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	00ffff3f 	.word	0x00ffff3f

080023b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	21a0      	movs	r1, #160	; 0xa0
 80023c4:	438a      	bics	r2, r1
 80023c6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80023c8:	f7fe fd12 	bl	8000df0 <HAL_GetTick>
 80023cc:	0003      	movs	r3, r0
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023d0:	e00a      	b.n	80023e8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023d2:	f7fe fd0d 	bl	8000df0 <HAL_GetTick>
 80023d6:	0002      	movs	r2, r0
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1ad2      	subs	r2, r2, r3
 80023dc:	23fa      	movs	r3, #250	; 0xfa
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d901      	bls.n	80023e8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e006      	b.n	80023f6 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	4013      	ands	r3, r2
 80023f2:	d0ee      	beq.n	80023d2 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b004      	add	sp, #16
 80023fc:	bd80      	pop	{r7, pc}

080023fe <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2240      	movs	r2, #64	; 0x40
 800240e:	4013      	ands	r3, r2
 8002410:	d11a      	bne.n	8002448 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2201      	movs	r2, #1
 8002418:	4252      	negs	r2, r2
 800241a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800241c:	f7fe fce8 	bl	8000df0 <HAL_GetTick>
 8002420:	0003      	movs	r3, r0
 8002422:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002424:	e00a      	b.n	800243c <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002426:	f7fe fce3 	bl	8000df0 <HAL_GetTick>
 800242a:	0002      	movs	r2, r0
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1ad2      	subs	r2, r2, r3
 8002430:	23fa      	movs	r3, #250	; 0xfa
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	429a      	cmp	r2, r3
 8002436:	d901      	bls.n	800243c <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e006      	b.n	800244a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2240      	movs	r2, #64	; 0x40
 8002444:	4013      	ands	r3, r2
 8002446:	d0ee      	beq.n	8002426 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b004      	add	sp, #16
 8002450:	bd80      	pop	{r7, pc}

08002452 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	0002      	movs	r2, r0
 800245a:	1dfb      	adds	r3, r7, #7
 800245c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800245e:	1dfb      	adds	r3, r7, #7
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	b2db      	uxtb	r3, r3
 8002466:	001a      	movs	r2, r3
 8002468:	0013      	movs	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	189b      	adds	r3, r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	1dfb      	adds	r3, r7, #7
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	210f      	movs	r1, #15
 800247c:	400b      	ands	r3, r1
 800247e:	b2db      	uxtb	r3, r3
 8002480:	18d3      	adds	r3, r2, r3
 8002482:	b2db      	uxtb	r3, r3
}
 8002484:	0018      	movs	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	b004      	add	sp, #16
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e044      	b.n	8002528 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d107      	bne.n	80024b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2270      	movs	r2, #112	; 0x70
 80024aa:	2100      	movs	r1, #0
 80024ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7fe faf3 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2224      	movs	r2, #36	; 0x24
 80024ba:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2101      	movs	r1, #1
 80024c8:	438a      	bics	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	0018      	movs	r0, r3
 80024d0:	f000 f8d8 	bl	8002684 <UART_SetConfig>
 80024d4:	0003      	movs	r3, r0
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e024      	b.n	8002528 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	0018      	movs	r0, r3
 80024ea:	f000 fbe3 	bl	8002cb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	490d      	ldr	r1, [pc, #52]	; (8002530 <HAL_UART_Init+0xa4>)
 80024fa:	400a      	ands	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	212a      	movs	r1, #42	; 0x2a
 800250a:	438a      	bics	r2, r1
 800250c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2101      	movs	r1, #1
 800251a:	430a      	orrs	r2, r1
 800251c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	0018      	movs	r0, r3
 8002522:	f000 fc7b 	bl	8002e1c <UART_CheckIdleState>
 8002526:	0003      	movs	r3, r0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}
 8002530:	ffffb7ff 	.word	0xffffb7ff

08002534 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	1dbb      	adds	r3, r7, #6
 8002542:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002548:	2b20      	cmp	r3, #32
 800254a:	d000      	beq.n	800254e <HAL_UART_Transmit+0x1a>
 800254c:	e094      	b.n	8002678 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_UART_Transmit+0x28>
 8002554:	1dbb      	adds	r3, r7, #6
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e08c      	b.n	800267a <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	015b      	lsls	r3, r3, #5
 8002568:	429a      	cmp	r2, r3
 800256a:	d109      	bne.n	8002580 <HAL_UART_Transmit+0x4c>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2201      	movs	r2, #1
 8002578:	4013      	ands	r3, r2
 800257a:	d001      	beq.n	8002580 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e07c      	b.n	800267a <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2270      	movs	r2, #112	; 0x70
 8002584:	5c9b      	ldrb	r3, [r3, r2]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_UART_Transmit+0x5a>
 800258a:	2302      	movs	r3, #2
 800258c:	e075      	b.n	800267a <HAL_UART_Transmit+0x146>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2270      	movs	r2, #112	; 0x70
 8002592:	2101      	movs	r1, #1
 8002594:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2221      	movs	r2, #33	; 0x21
 80025a0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80025a2:	f7fe fc25 	bl	8000df0 <HAL_GetTick>
 80025a6:	0003      	movs	r3, r0
 80025a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1dba      	adds	r2, r7, #6
 80025ae:	2150      	movs	r1, #80	; 0x50
 80025b0:	8812      	ldrh	r2, [r2, #0]
 80025b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1dba      	adds	r2, r7, #6
 80025b8:	2152      	movs	r1, #82	; 0x52
 80025ba:	8812      	ldrh	r2, [r2, #0]
 80025bc:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	015b      	lsls	r3, r3, #5
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d108      	bne.n	80025dc <HAL_UART_Transmit+0xa8>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d104      	bne.n	80025dc <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	e003      	b.n	80025e4 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025e4:	e02c      	b.n	8002640 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	0013      	movs	r3, r2
 80025f0:	2200      	movs	r2, #0
 80025f2:	2180      	movs	r1, #128	; 0x80
 80025f4:	f000 fc58 	bl	8002ea8 <UART_WaitOnFlagUntilTimeout>
 80025f8:	1e03      	subs	r3, r0, #0
 80025fa:	d001      	beq.n	8002600 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e03c      	b.n	800267a <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10b      	bne.n	800261e <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	001a      	movs	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	05d2      	lsls	r2, r2, #23
 8002612:	0dd2      	lsrs	r2, r2, #23
 8002614:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	3302      	adds	r3, #2
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	e007      	b.n	800262e <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	3301      	adds	r3, #1
 800262c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2252      	movs	r2, #82	; 0x52
 8002632:	5a9b      	ldrh	r3, [r3, r2]
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b299      	uxth	r1, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2252      	movs	r2, #82	; 0x52
 800263e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2252      	movs	r2, #82	; 0x52
 8002644:	5a9b      	ldrh	r3, [r3, r2]
 8002646:	b29b      	uxth	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1cc      	bne.n	80025e6 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	0013      	movs	r3, r2
 8002656:	2200      	movs	r2, #0
 8002658:	2140      	movs	r1, #64	; 0x40
 800265a:	f000 fc25 	bl	8002ea8 <UART_WaitOnFlagUntilTimeout>
 800265e:	1e03      	subs	r3, r0, #0
 8002660:	d001      	beq.n	8002666 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e009      	b.n	800267a <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2220      	movs	r2, #32
 800266a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2270      	movs	r2, #112	; 0x70
 8002670:	2100      	movs	r1, #0
 8002672:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	e000      	b.n	800267a <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
  }
}
 800267a:	0018      	movs	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	b008      	add	sp, #32
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002684:	b5b0      	push	{r4, r5, r7, lr}
 8002686:	b08e      	sub	sp, #56	; 0x38
 8002688:	af00      	add	r7, sp, #0
 800268a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800268c:	231b      	movs	r3, #27
 800268e:	2218      	movs	r2, #24
 8002690:	4694      	mov	ip, r2
 8002692:	44bc      	add	ip, r7
 8002694:	4463      	add	r3, ip
 8002696:	2210      	movs	r2, #16
 8002698:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800269a:	2300      	movs	r3, #0
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800269e:	2313      	movs	r3, #19
 80026a0:	2218      	movs	r2, #24
 80026a2:	4694      	mov	ip, r2
 80026a4:	44bc      	add	ip, r7
 80026a6:	4463      	add	r3, ip
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	431a      	orrs	r2, r3
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4ac8      	ldr	r2, [pc, #800]	; (80029f0 <UART_SetConfig+0x36c>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	0019      	movs	r1, r3
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4ac3      	ldr	r2, [pc, #780]	; (80029f4 <UART_SetConfig+0x370>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	0019      	movs	r1, r3
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4abd      	ldr	r2, [pc, #756]	; (80029f8 <UART_SetConfig+0x374>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d004      	beq.n	8002710 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800270c:	4313      	orrs	r3, r2
 800270e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	4ab9      	ldr	r2, [pc, #740]	; (80029fc <UART_SetConfig+0x378>)
 8002718:	4013      	ands	r3, r2
 800271a:	0019      	movs	r1, r3
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002722:	430a      	orrs	r2, r1
 8002724:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4ab5      	ldr	r2, [pc, #724]	; (8002a00 <UART_SetConfig+0x37c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d134      	bne.n	800279a <UART_SetConfig+0x116>
 8002730:	4bb4      	ldr	r3, [pc, #720]	; (8002a04 <UART_SetConfig+0x380>)
 8002732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002734:	2203      	movs	r2, #3
 8002736:	4013      	ands	r3, r2
 8002738:	2b01      	cmp	r3, #1
 800273a:	d015      	beq.n	8002768 <UART_SetConfig+0xe4>
 800273c:	d304      	bcc.n	8002748 <UART_SetConfig+0xc4>
 800273e:	2b02      	cmp	r3, #2
 8002740:	d00a      	beq.n	8002758 <UART_SetConfig+0xd4>
 8002742:	2b03      	cmp	r3, #3
 8002744:	d018      	beq.n	8002778 <UART_SetConfig+0xf4>
 8002746:	e01f      	b.n	8002788 <UART_SetConfig+0x104>
 8002748:	231b      	movs	r3, #27
 800274a:	2218      	movs	r2, #24
 800274c:	4694      	mov	ip, r2
 800274e:	44bc      	add	ip, r7
 8002750:	4463      	add	r3, ip
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
 8002756:	e0ab      	b.n	80028b0 <UART_SetConfig+0x22c>
 8002758:	231b      	movs	r3, #27
 800275a:	2218      	movs	r2, #24
 800275c:	4694      	mov	ip, r2
 800275e:	44bc      	add	ip, r7
 8002760:	4463      	add	r3, ip
 8002762:	2202      	movs	r2, #2
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	e0a3      	b.n	80028b0 <UART_SetConfig+0x22c>
 8002768:	231b      	movs	r3, #27
 800276a:	2218      	movs	r2, #24
 800276c:	4694      	mov	ip, r2
 800276e:	44bc      	add	ip, r7
 8002770:	4463      	add	r3, ip
 8002772:	2204      	movs	r2, #4
 8002774:	701a      	strb	r2, [r3, #0]
 8002776:	e09b      	b.n	80028b0 <UART_SetConfig+0x22c>
 8002778:	231b      	movs	r3, #27
 800277a:	2218      	movs	r2, #24
 800277c:	4694      	mov	ip, r2
 800277e:	44bc      	add	ip, r7
 8002780:	4463      	add	r3, ip
 8002782:	2208      	movs	r2, #8
 8002784:	701a      	strb	r2, [r3, #0]
 8002786:	e093      	b.n	80028b0 <UART_SetConfig+0x22c>
 8002788:	231b      	movs	r3, #27
 800278a:	2218      	movs	r2, #24
 800278c:	4694      	mov	ip, r2
 800278e:	44bc      	add	ip, r7
 8002790:	4463      	add	r3, ip
 8002792:	2210      	movs	r2, #16
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	e08a      	b.n	80028b0 <UART_SetConfig+0x22c>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a9a      	ldr	r2, [pc, #616]	; (8002a08 <UART_SetConfig+0x384>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d137      	bne.n	8002814 <UART_SetConfig+0x190>
 80027a4:	4b97      	ldr	r3, [pc, #604]	; (8002a04 <UART_SetConfig+0x380>)
 80027a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a8:	220c      	movs	r2, #12
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d018      	beq.n	80027e2 <UART_SetConfig+0x15e>
 80027b0:	d802      	bhi.n	80027b8 <UART_SetConfig+0x134>
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <UART_SetConfig+0x13e>
 80027b6:	e024      	b.n	8002802 <UART_SetConfig+0x17e>
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d00a      	beq.n	80027d2 <UART_SetConfig+0x14e>
 80027bc:	2b0c      	cmp	r3, #12
 80027be:	d018      	beq.n	80027f2 <UART_SetConfig+0x16e>
 80027c0:	e01f      	b.n	8002802 <UART_SetConfig+0x17e>
 80027c2:	231b      	movs	r3, #27
 80027c4:	2218      	movs	r2, #24
 80027c6:	4694      	mov	ip, r2
 80027c8:	44bc      	add	ip, r7
 80027ca:	4463      	add	r3, ip
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	e06e      	b.n	80028b0 <UART_SetConfig+0x22c>
 80027d2:	231b      	movs	r3, #27
 80027d4:	2218      	movs	r2, #24
 80027d6:	4694      	mov	ip, r2
 80027d8:	44bc      	add	ip, r7
 80027da:	4463      	add	r3, ip
 80027dc:	2202      	movs	r2, #2
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e066      	b.n	80028b0 <UART_SetConfig+0x22c>
 80027e2:	231b      	movs	r3, #27
 80027e4:	2218      	movs	r2, #24
 80027e6:	4694      	mov	ip, r2
 80027e8:	44bc      	add	ip, r7
 80027ea:	4463      	add	r3, ip
 80027ec:	2204      	movs	r2, #4
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	e05e      	b.n	80028b0 <UART_SetConfig+0x22c>
 80027f2:	231b      	movs	r3, #27
 80027f4:	2218      	movs	r2, #24
 80027f6:	4694      	mov	ip, r2
 80027f8:	44bc      	add	ip, r7
 80027fa:	4463      	add	r3, ip
 80027fc:	2208      	movs	r2, #8
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	e056      	b.n	80028b0 <UART_SetConfig+0x22c>
 8002802:	231b      	movs	r3, #27
 8002804:	2218      	movs	r2, #24
 8002806:	4694      	mov	ip, r2
 8002808:	44bc      	add	ip, r7
 800280a:	4463      	add	r3, ip
 800280c:	2210      	movs	r2, #16
 800280e:	701a      	strb	r2, [r3, #0]
 8002810:	46c0      	nop			; (mov r8, r8)
 8002812:	e04d      	b.n	80028b0 <UART_SetConfig+0x22c>
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a77      	ldr	r2, [pc, #476]	; (80029f8 <UART_SetConfig+0x374>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d141      	bne.n	80028a2 <UART_SetConfig+0x21e>
 800281e:	4b79      	ldr	r3, [pc, #484]	; (8002a04 <UART_SetConfig+0x380>)
 8002820:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002822:	23c0      	movs	r3, #192	; 0xc0
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	4013      	ands	r3, r2
 8002828:	2280      	movs	r2, #128	; 0x80
 800282a:	00d2      	lsls	r2, r2, #3
 800282c:	4293      	cmp	r3, r2
 800282e:	d01f      	beq.n	8002870 <UART_SetConfig+0x1ec>
 8002830:	2280      	movs	r2, #128	; 0x80
 8002832:	00d2      	lsls	r2, r2, #3
 8002834:	4293      	cmp	r3, r2
 8002836:	d802      	bhi.n	800283e <UART_SetConfig+0x1ba>
 8002838:	2b00      	cmp	r3, #0
 800283a:	d009      	beq.n	8002850 <UART_SetConfig+0x1cc>
 800283c:	e028      	b.n	8002890 <UART_SetConfig+0x20c>
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	0112      	lsls	r2, r2, #4
 8002842:	4293      	cmp	r3, r2
 8002844:	d00c      	beq.n	8002860 <UART_SetConfig+0x1dc>
 8002846:	22c0      	movs	r2, #192	; 0xc0
 8002848:	0112      	lsls	r2, r2, #4
 800284a:	4293      	cmp	r3, r2
 800284c:	d018      	beq.n	8002880 <UART_SetConfig+0x1fc>
 800284e:	e01f      	b.n	8002890 <UART_SetConfig+0x20c>
 8002850:	231b      	movs	r3, #27
 8002852:	2218      	movs	r2, #24
 8002854:	4694      	mov	ip, r2
 8002856:	44bc      	add	ip, r7
 8002858:	4463      	add	r3, ip
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	e027      	b.n	80028b0 <UART_SetConfig+0x22c>
 8002860:	231b      	movs	r3, #27
 8002862:	2218      	movs	r2, #24
 8002864:	4694      	mov	ip, r2
 8002866:	44bc      	add	ip, r7
 8002868:	4463      	add	r3, ip
 800286a:	2202      	movs	r2, #2
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	e01f      	b.n	80028b0 <UART_SetConfig+0x22c>
 8002870:	231b      	movs	r3, #27
 8002872:	2218      	movs	r2, #24
 8002874:	4694      	mov	ip, r2
 8002876:	44bc      	add	ip, r7
 8002878:	4463      	add	r3, ip
 800287a:	2204      	movs	r2, #4
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	e017      	b.n	80028b0 <UART_SetConfig+0x22c>
 8002880:	231b      	movs	r3, #27
 8002882:	2218      	movs	r2, #24
 8002884:	4694      	mov	ip, r2
 8002886:	44bc      	add	ip, r7
 8002888:	4463      	add	r3, ip
 800288a:	2208      	movs	r2, #8
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	e00f      	b.n	80028b0 <UART_SetConfig+0x22c>
 8002890:	231b      	movs	r3, #27
 8002892:	2218      	movs	r2, #24
 8002894:	4694      	mov	ip, r2
 8002896:	44bc      	add	ip, r7
 8002898:	4463      	add	r3, ip
 800289a:	2210      	movs	r2, #16
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	e006      	b.n	80028b0 <UART_SetConfig+0x22c>
 80028a2:	231b      	movs	r3, #27
 80028a4:	2218      	movs	r2, #24
 80028a6:	4694      	mov	ip, r2
 80028a8:	44bc      	add	ip, r7
 80028aa:	4463      	add	r3, ip
 80028ac:	2210      	movs	r2, #16
 80028ae:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a50      	ldr	r2, [pc, #320]	; (80029f8 <UART_SetConfig+0x374>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d000      	beq.n	80028bc <UART_SetConfig+0x238>
 80028ba:	e083      	b.n	80029c4 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80028bc:	231b      	movs	r3, #27
 80028be:	2218      	movs	r2, #24
 80028c0:	4694      	mov	ip, r2
 80028c2:	44bc      	add	ip, r7
 80028c4:	4463      	add	r3, ip
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d00d      	beq.n	80028e8 <UART_SetConfig+0x264>
 80028cc:	dc02      	bgt.n	80028d4 <UART_SetConfig+0x250>
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <UART_SetConfig+0x25a>
 80028d2:	e01d      	b.n	8002910 <UART_SetConfig+0x28c>
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d012      	beq.n	80028fe <UART_SetConfig+0x27a>
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d015      	beq.n	8002908 <UART_SetConfig+0x284>
 80028dc:	e018      	b.n	8002910 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80028de:	f7ff fa8f 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 80028e2:	0003      	movs	r3, r0
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80028e6:	e01b      	b.n	8002920 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028e8:	4b46      	ldr	r3, [pc, #280]	; (8002a04 <UART_SetConfig+0x380>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2210      	movs	r2, #16
 80028ee:	4013      	ands	r3, r2
 80028f0:	d002      	beq.n	80028f8 <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80028f2:	4b46      	ldr	r3, [pc, #280]	; (8002a0c <UART_SetConfig+0x388>)
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 80028f6:	e013      	b.n	8002920 <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80028f8:	4b45      	ldr	r3, [pc, #276]	; (8002a10 <UART_SetConfig+0x38c>)
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80028fc:	e010      	b.n	8002920 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80028fe:	f7ff f9f1 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8002902:	0003      	movs	r3, r0
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002906:	e00b      	b.n	8002920 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002908:	2380      	movs	r3, #128	; 0x80
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800290e:	e007      	b.n	8002920 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002910:	2313      	movs	r3, #19
 8002912:	2218      	movs	r2, #24
 8002914:	4694      	mov	ip, r2
 8002916:	44bc      	add	ip, r7
 8002918:	4463      	add	r3, ip
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
        break;
 800291e:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	2b00      	cmp	r3, #0
 8002924:	d100      	bne.n	8002928 <UART_SetConfig+0x2a4>
 8002926:	e1a6      	b.n	8002c76 <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	0013      	movs	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	189b      	adds	r3, r3, r2
 8002932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002934:	429a      	cmp	r2, r3
 8002936:	d305      	bcc.n	8002944 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800293e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002940:	429a      	cmp	r2, r3
 8002942:	d907      	bls.n	8002954 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 8002944:	2313      	movs	r3, #19
 8002946:	2218      	movs	r2, #24
 8002948:	4694      	mov	ip, r2
 800294a:	44bc      	add	ip, r7
 800294c:	4463      	add	r3, ip
 800294e:	2201      	movs	r2, #1
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	e190      	b.n	8002c76 <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	6939      	ldr	r1, [r7, #16]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	000b      	movs	r3, r1
 8002962:	0e1b      	lsrs	r3, r3, #24
 8002964:	0010      	movs	r0, r2
 8002966:	0205      	lsls	r5, r0, #8
 8002968:	431d      	orrs	r5, r3
 800296a:	000b      	movs	r3, r1
 800296c:	021c      	lsls	r4, r3, #8
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	085b      	lsrs	r3, r3, #1
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68b8      	ldr	r0, [r7, #8]
 800297c:	68f9      	ldr	r1, [r7, #12]
 800297e:	1900      	adds	r0, r0, r4
 8002980:	4169      	adcs	r1, r5
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	2300      	movs	r3, #0
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f7fd fc46 	bl	8000220 <__aeabi_uldivmod>
 8002994:	0003      	movs	r3, r0
 8002996:	000c      	movs	r4, r1
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <UART_SetConfig+0x390>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d908      	bls.n	80029b4 <UART_SetConfig+0x330>
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <UART_SetConfig+0x394>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d804      	bhi.n	80029b4 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	e160      	b.n	8002c76 <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 80029b4:	2313      	movs	r3, #19
 80029b6:	2218      	movs	r2, #24
 80029b8:	4694      	mov	ip, r2
 80029ba:	44bc      	add	ip, r7
 80029bc:	4463      	add	r3, ip
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e158      	b.n	8002c76 <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d000      	beq.n	80029d2 <UART_SetConfig+0x34e>
 80029d0:	e0c3      	b.n	8002b5a <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 80029d2:	231b      	movs	r3, #27
 80029d4:	2218      	movs	r2, #24
 80029d6:	4694      	mov	ip, r2
 80029d8:	44bc      	add	ip, r7
 80029da:	4463      	add	r3, ip
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d900      	bls.n	80029e4 <UART_SetConfig+0x360>
 80029e2:	e086      	b.n	8002af2 <UART_SetConfig+0x46e>
 80029e4:	009a      	lsls	r2, r3, #2
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <UART_SetConfig+0x398>)
 80029e8:	18d3      	adds	r3, r2, r3
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	469f      	mov	pc, r3
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	efff69f3 	.word	0xefff69f3
 80029f4:	ffffcfff 	.word	0xffffcfff
 80029f8:	40004800 	.word	0x40004800
 80029fc:	fffff4ff 	.word	0xfffff4ff
 8002a00:	40013800 	.word	0x40013800
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40004400 	.word	0x40004400
 8002a0c:	003d0900 	.word	0x003d0900
 8002a10:	00f42400 	.word	0x00f42400
 8002a14:	000002ff 	.word	0x000002ff
 8002a18:	000fffff 	.word	0x000fffff
 8002a1c:	08003e2c 	.word	0x08003e2c
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a20:	f7ff f9ee 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 8002a24:	0003      	movs	r3, r0
 8002a26:	005a      	lsls	r2, r3, #1
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	085b      	lsrs	r3, r3, #1
 8002a2e:	18d2      	adds	r2, r2, r3
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	0019      	movs	r1, r3
 8002a36:	0010      	movs	r0, r2
 8002a38:	f7fd fb66 	bl	8000108 <__udivsi3>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a42:	e05e      	b.n	8002b02 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a44:	f7ff f9f2 	bl	8001e2c <HAL_RCC_GetPCLK2Freq>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	005a      	lsls	r2, r3, #1
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	085b      	lsrs	r3, r3, #1
 8002a52:	18d2      	adds	r2, r2, r3
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	0019      	movs	r1, r3
 8002a5a:	0010      	movs	r0, r2
 8002a5c:	f7fd fb54 	bl	8000108 <__udivsi3>
 8002a60:	0003      	movs	r3, r0
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a66:	e04c      	b.n	8002b02 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a68:	4b8b      	ldr	r3, [pc, #556]	; (8002c98 <UART_SetConfig+0x614>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2210      	movs	r2, #16
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d00e      	beq.n	8002a90 <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	085b      	lsrs	r3, r3, #1
 8002a78:	4a88      	ldr	r2, [pc, #544]	; (8002c9c <UART_SetConfig+0x618>)
 8002a7a:	189a      	adds	r2, r3, r2
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	0019      	movs	r1, r3
 8002a82:	0010      	movs	r0, r2
 8002a84:	f7fd fb40 	bl	8000108 <__udivsi3>
 8002a88:	0003      	movs	r3, r0
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002a8e:	e038      	b.n	8002b02 <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	085b      	lsrs	r3, r3, #1
 8002a96:	4a82      	ldr	r2, [pc, #520]	; (8002ca0 <UART_SetConfig+0x61c>)
 8002a98:	189a      	adds	r2, r3, r2
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	0010      	movs	r0, r2
 8002aa2:	f7fd fb31 	bl	8000108 <__udivsi3>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002aac:	e029      	b.n	8002b02 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002aae:	f7ff f919 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	005a      	lsls	r2, r3, #1
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	18d2      	adds	r2, r2, r3
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	0010      	movs	r0, r2
 8002ac6:	f7fd fb1f 	bl	8000108 <__udivsi3>
 8002aca:	0003      	movs	r3, r0
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ad0:	e017      	b.n	8002b02 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	085b      	lsrs	r3, r3, #1
 8002ad8:	2280      	movs	r2, #128	; 0x80
 8002ada:	0252      	lsls	r2, r2, #9
 8002adc:	189a      	adds	r2, r3, r2
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	0010      	movs	r0, r2
 8002ae6:	f7fd fb0f 	bl	8000108 <__udivsi3>
 8002aea:	0003      	movs	r3, r0
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002af0:	e007      	b.n	8002b02 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002af2:	2313      	movs	r3, #19
 8002af4:	2218      	movs	r2, #24
 8002af6:	4694      	mov	ip, r2
 8002af8:	44bc      	add	ip, r7
 8002afa:	4463      	add	r3, ip
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
        break;
 8002b00:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	2b0f      	cmp	r3, #15
 8002b06:	d920      	bls.n	8002b4a <UART_SetConfig+0x4c6>
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	4a66      	ldr	r2, [pc, #408]	; (8002ca4 <UART_SetConfig+0x620>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d81c      	bhi.n	8002b4a <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	200a      	movs	r0, #10
 8002b16:	2418      	movs	r4, #24
 8002b18:	193b      	adds	r3, r7, r4
 8002b1a:	181b      	adds	r3, r3, r0
 8002b1c:	210f      	movs	r1, #15
 8002b1e:	438a      	bics	r2, r1
 8002b20:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	085b      	lsrs	r3, r3, #1
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2207      	movs	r2, #7
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	b299      	uxth	r1, r3
 8002b2e:	193b      	adds	r3, r7, r4
 8002b30:	181b      	adds	r3, r3, r0
 8002b32:	193a      	adds	r2, r7, r4
 8002b34:	1812      	adds	r2, r2, r0
 8002b36:	8812      	ldrh	r2, [r2, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	193a      	adds	r2, r7, r4
 8002b42:	1812      	adds	r2, r2, r0
 8002b44:	8812      	ldrh	r2, [r2, #0]
 8002b46:	60da      	str	r2, [r3, #12]
 8002b48:	e095      	b.n	8002c76 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8002b4a:	2313      	movs	r3, #19
 8002b4c:	2218      	movs	r2, #24
 8002b4e:	4694      	mov	ip, r2
 8002b50:	44bc      	add	ip, r7
 8002b52:	4463      	add	r3, ip
 8002b54:	2201      	movs	r2, #1
 8002b56:	701a      	strb	r2, [r3, #0]
 8002b58:	e08d      	b.n	8002c76 <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 8002b5a:	231b      	movs	r3, #27
 8002b5c:	2218      	movs	r2, #24
 8002b5e:	4694      	mov	ip, r2
 8002b60:	44bc      	add	ip, r7
 8002b62:	4463      	add	r3, ip
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d86a      	bhi.n	8002c40 <UART_SetConfig+0x5bc>
 8002b6a:	009a      	lsls	r2, r3, #2
 8002b6c:	4b4e      	ldr	r3, [pc, #312]	; (8002ca8 <UART_SetConfig+0x624>)
 8002b6e:	18d3      	adds	r3, r2, r3
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002b74:	f7ff f944 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 8002b78:	0002      	movs	r2, r0
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	085b      	lsrs	r3, r3, #1
 8002b80:	18d2      	adds	r2, r2, r3
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	0019      	movs	r1, r3
 8002b88:	0010      	movs	r0, r2
 8002b8a:	f7fd fabd 	bl	8000108 <__udivsi3>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b94:	e05c      	b.n	8002c50 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002b96:	f7ff f949 	bl	8001e2c <HAL_RCC_GetPCLK2Freq>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	085b      	lsrs	r3, r3, #1
 8002ba2:	18d2      	adds	r2, r2, r3
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	0019      	movs	r1, r3
 8002baa:	0010      	movs	r0, r2
 8002bac:	f7fd faac 	bl	8000108 <__udivsi3>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bb6:	e04b      	b.n	8002c50 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bb8:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <UART_SetConfig+0x614>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2210      	movs	r2, #16
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d00e      	beq.n	8002be0 <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	085b      	lsrs	r3, r3, #1
 8002bc8:	4a38      	ldr	r2, [pc, #224]	; (8002cac <UART_SetConfig+0x628>)
 8002bca:	189a      	adds	r2, r3, r2
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	0010      	movs	r0, r2
 8002bd4:	f7fd fa98 	bl	8000108 <__udivsi3>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002bde:	e037      	b.n	8002c50 <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	4a32      	ldr	r2, [pc, #200]	; (8002cb0 <UART_SetConfig+0x62c>)
 8002be8:	189a      	adds	r2, r3, r2
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	0019      	movs	r1, r3
 8002bf0:	0010      	movs	r0, r2
 8002bf2:	f7fd fa89 	bl	8000108 <__udivsi3>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bfc:	e028      	b.n	8002c50 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002bfe:	f7ff f871 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8002c02:	0002      	movs	r2, r0
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	085b      	lsrs	r3, r3, #1
 8002c0a:	18d2      	adds	r2, r2, r3
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	0019      	movs	r1, r3
 8002c12:	0010      	movs	r0, r2
 8002c14:	f7fd fa78 	bl	8000108 <__udivsi3>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c1e:	e017      	b.n	8002c50 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	2280      	movs	r2, #128	; 0x80
 8002c28:	0212      	lsls	r2, r2, #8
 8002c2a:	189a      	adds	r2, r3, r2
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	0019      	movs	r1, r3
 8002c32:	0010      	movs	r0, r2
 8002c34:	f7fd fa68 	bl	8000108 <__udivsi3>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c3e:	e007      	b.n	8002c50 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002c40:	2313      	movs	r3, #19
 8002c42:	2218      	movs	r2, #24
 8002c44:	4694      	mov	ip, r2
 8002c46:	44bc      	add	ip, r7
 8002c48:	4463      	add	r3, ip
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
        break;
 8002c4e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c52:	2b0f      	cmp	r3, #15
 8002c54:	d908      	bls.n	8002c68 <UART_SetConfig+0x5e4>
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <UART_SetConfig+0x620>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d804      	bhi.n	8002c68 <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	e006      	b.n	8002c76 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8002c68:	2313      	movs	r3, #19
 8002c6a:	2218      	movs	r2, #24
 8002c6c:	4694      	mov	ip, r2
 8002c6e:	44bc      	add	ip, r7
 8002c70:	4463      	add	r3, ip
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002c82:	2313      	movs	r3, #19
 8002c84:	2218      	movs	r2, #24
 8002c86:	4694      	mov	ip, r2
 8002c88:	44bc      	add	ip, r7
 8002c8a:	4463      	add	r3, ip
 8002c8c:	781b      	ldrb	r3, [r3, #0]
}
 8002c8e:	0018      	movs	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b00e      	add	sp, #56	; 0x38
 8002c94:	bdb0      	pop	{r4, r5, r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	007a1200 	.word	0x007a1200
 8002ca0:	01e84800 	.word	0x01e84800
 8002ca4:	0000ffff 	.word	0x0000ffff
 8002ca8:	08003e50 	.word	0x08003e50
 8002cac:	003d0900 	.word	0x003d0900
 8002cb0:	00f42400 	.word	0x00f42400

08002cb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d00b      	beq.n	8002cde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	4a4a      	ldr	r2, [pc, #296]	; (8002df8 <UART_AdvFeatureConfig+0x144>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	0019      	movs	r1, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d00b      	beq.n	8002d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4a43      	ldr	r2, [pc, #268]	; (8002dfc <UART_AdvFeatureConfig+0x148>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	2204      	movs	r2, #4
 8002d06:	4013      	ands	r3, r2
 8002d08:	d00b      	beq.n	8002d22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4a3b      	ldr	r2, [pc, #236]	; (8002e00 <UART_AdvFeatureConfig+0x14c>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	0019      	movs	r1, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	2208      	movs	r2, #8
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d00b      	beq.n	8002d44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4a34      	ldr	r2, [pc, #208]	; (8002e04 <UART_AdvFeatureConfig+0x150>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	0019      	movs	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	2210      	movs	r2, #16
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d00b      	beq.n	8002d66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a2c      	ldr	r2, [pc, #176]	; (8002e08 <UART_AdvFeatureConfig+0x154>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d00b      	beq.n	8002d88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	4a25      	ldr	r2, [pc, #148]	; (8002e0c <UART_AdvFeatureConfig+0x158>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	2240      	movs	r2, #64	; 0x40
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d01d      	beq.n	8002dce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <UART_AdvFeatureConfig+0x15c>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	035b      	lsls	r3, r3, #13
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d10b      	bne.n	8002dce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <UART_AdvFeatureConfig+0x160>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d00b      	beq.n	8002df0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4a0e      	ldr	r2, [pc, #56]	; (8002e18 <UART_AdvFeatureConfig+0x164>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	0019      	movs	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	605a      	str	r2, [r3, #4]
  }
}
 8002df0:	46c0      	nop			; (mov r8, r8)
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b002      	add	sp, #8
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	fffdffff 	.word	0xfffdffff
 8002dfc:	fffeffff 	.word	0xfffeffff
 8002e00:	fffbffff 	.word	0xfffbffff
 8002e04:	ffff7fff 	.word	0xffff7fff
 8002e08:	ffffefff 	.word	0xffffefff
 8002e0c:	ffffdfff 	.word	0xffffdfff
 8002e10:	ffefffff 	.word	0xffefffff
 8002e14:	ff9fffff 	.word	0xff9fffff
 8002e18:	fff7ffff 	.word	0xfff7ffff

08002e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002e2a:	f7fd ffe1 	bl	8000df0 <HAL_GetTick>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2208      	movs	r2, #8
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d10d      	bne.n	8002e5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	0399      	lsls	r1, r3, #14
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <UART_CheckIdleState+0x88>)
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	0013      	movs	r3, r2
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f000 f82a 	bl	8002ea8 <UART_WaitOnFlagUntilTimeout>
 8002e54:	1e03      	subs	r3, r0, #0
 8002e56:	d001      	beq.n	8002e5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e01f      	b.n	8002e9c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2204      	movs	r2, #4
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d10d      	bne.n	8002e86 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	03d9      	lsls	r1, r3, #15
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <UART_CheckIdleState+0x88>)
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	0013      	movs	r3, r2
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f000 f815 	bl	8002ea8 <UART_WaitOnFlagUntilTimeout>
 8002e7e:	1e03      	subs	r3, r0, #0
 8002e80:	d001      	beq.n	8002e86 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e00a      	b.n	8002e9c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2270      	movs	r2, #112	; 0x70
 8002e96:	2100      	movs	r1, #0
 8002e98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b004      	add	sp, #16
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	01ffffff 	.word	0x01ffffff

08002ea8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	1dfb      	adds	r3, r7, #7
 8002eb6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb8:	e029      	b.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	d026      	beq.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec0:	f7fd ff96 	bl	8000df0 <HAL_GetTick>
 8002ec4:	0002      	movs	r2, r0
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d302      	bcc.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d11b      	bne.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4915      	ldr	r1, [pc, #84]	; (8002f38 <UART_WaitOnFlagUntilTimeout+0x90>)
 8002ee2:	400a      	ands	r2, r1
 8002ee4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	438a      	bics	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2270      	movs	r2, #112	; 0x70
 8002f06:	2100      	movs	r1, #0
 8002f08:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e00f      	b.n	8002f2e <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	4013      	ands	r3, r2
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	425a      	negs	r2, r3
 8002f1e:	4153      	adcs	r3, r2
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	001a      	movs	r2, r3
 8002f24:	1dfb      	adds	r3, r7, #7
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d0c6      	beq.n	8002eba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	0018      	movs	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b004      	add	sp, #16
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	fffffe5f 	.word	0xfffffe5f

08002f3c <__errno>:
 8002f3c:	4b01      	ldr	r3, [pc, #4]	; (8002f44 <__errno+0x8>)
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	4770      	bx	lr
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	2000000c 	.word	0x2000000c

08002f48 <__libc_init_array>:
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	2600      	movs	r6, #0
 8002f4c:	4d0c      	ldr	r5, [pc, #48]	; (8002f80 <__libc_init_array+0x38>)
 8002f4e:	4c0d      	ldr	r4, [pc, #52]	; (8002f84 <__libc_init_array+0x3c>)
 8002f50:	1b64      	subs	r4, r4, r5
 8002f52:	10a4      	asrs	r4, r4, #2
 8002f54:	42a6      	cmp	r6, r4
 8002f56:	d109      	bne.n	8002f6c <__libc_init_array+0x24>
 8002f58:	2600      	movs	r6, #0
 8002f5a:	f000 ff39 	bl	8003dd0 <_init>
 8002f5e:	4d0a      	ldr	r5, [pc, #40]	; (8002f88 <__libc_init_array+0x40>)
 8002f60:	4c0a      	ldr	r4, [pc, #40]	; (8002f8c <__libc_init_array+0x44>)
 8002f62:	1b64      	subs	r4, r4, r5
 8002f64:	10a4      	asrs	r4, r4, #2
 8002f66:	42a6      	cmp	r6, r4
 8002f68:	d105      	bne.n	8002f76 <__libc_init_array+0x2e>
 8002f6a:	bd70      	pop	{r4, r5, r6, pc}
 8002f6c:	00b3      	lsls	r3, r6, #2
 8002f6e:	58eb      	ldr	r3, [r5, r3]
 8002f70:	4798      	blx	r3
 8002f72:	3601      	adds	r6, #1
 8002f74:	e7ee      	b.n	8002f54 <__libc_init_array+0xc>
 8002f76:	00b3      	lsls	r3, r6, #2
 8002f78:	58eb      	ldr	r3, [r5, r3]
 8002f7a:	4798      	blx	r3
 8002f7c:	3601      	adds	r6, #1
 8002f7e:	e7f2      	b.n	8002f66 <__libc_init_array+0x1e>
 8002f80:	08003f14 	.word	0x08003f14
 8002f84:	08003f14 	.word	0x08003f14
 8002f88:	08003f14 	.word	0x08003f14
 8002f8c:	08003f18 	.word	0x08003f18

08002f90 <memset>:
 8002f90:	0003      	movs	r3, r0
 8002f92:	1812      	adds	r2, r2, r0
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d100      	bne.n	8002f9a <memset+0xa>
 8002f98:	4770      	bx	lr
 8002f9a:	7019      	strb	r1, [r3, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	e7f9      	b.n	8002f94 <memset+0x4>

08002fa0 <iprintf>:
 8002fa0:	b40f      	push	{r0, r1, r2, r3}
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <iprintf+0x30>)
 8002fa4:	b513      	push	{r0, r1, r4, lr}
 8002fa6:	681c      	ldr	r4, [r3, #0]
 8002fa8:	2c00      	cmp	r4, #0
 8002faa:	d005      	beq.n	8002fb8 <iprintf+0x18>
 8002fac:	69a3      	ldr	r3, [r4, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d102      	bne.n	8002fb8 <iprintf+0x18>
 8002fb2:	0020      	movs	r0, r4
 8002fb4:	f000 f850 	bl	8003058 <__sinit>
 8002fb8:	ab05      	add	r3, sp, #20
 8002fba:	9a04      	ldr	r2, [sp, #16]
 8002fbc:	68a1      	ldr	r1, [r4, #8]
 8002fbe:	0020      	movs	r0, r4
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	f000 f963 	bl	800328c <_vfiprintf_r>
 8002fc6:	bc16      	pop	{r1, r2, r4}
 8002fc8:	bc08      	pop	{r3}
 8002fca:	b004      	add	sp, #16
 8002fcc:	4718      	bx	r3
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	2000000c 	.word	0x2000000c

08002fd4 <std>:
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	b510      	push	{r4, lr}
 8002fd8:	0004      	movs	r4, r0
 8002fda:	6003      	str	r3, [r0, #0]
 8002fdc:	6043      	str	r3, [r0, #4]
 8002fde:	6083      	str	r3, [r0, #8]
 8002fe0:	8181      	strh	r1, [r0, #12]
 8002fe2:	6643      	str	r3, [r0, #100]	; 0x64
 8002fe4:	81c2      	strh	r2, [r0, #14]
 8002fe6:	6103      	str	r3, [r0, #16]
 8002fe8:	6143      	str	r3, [r0, #20]
 8002fea:	6183      	str	r3, [r0, #24]
 8002fec:	0019      	movs	r1, r3
 8002fee:	2208      	movs	r2, #8
 8002ff0:	305c      	adds	r0, #92	; 0x5c
 8002ff2:	f7ff ffcd 	bl	8002f90 <memset>
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <std+0x38>)
 8002ff8:	6224      	str	r4, [r4, #32]
 8002ffa:	6263      	str	r3, [r4, #36]	; 0x24
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <std+0x3c>)
 8002ffe:	62a3      	str	r3, [r4, #40]	; 0x28
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <std+0x40>)
 8003002:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <std+0x44>)
 8003006:	6323      	str	r3, [r4, #48]	; 0x30
 8003008:	bd10      	pop	{r4, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	080037c9 	.word	0x080037c9
 8003010:	080037f1 	.word	0x080037f1
 8003014:	08003829 	.word	0x08003829
 8003018:	08003855 	.word	0x08003855

0800301c <_cleanup_r>:
 800301c:	b510      	push	{r4, lr}
 800301e:	4902      	ldr	r1, [pc, #8]	; (8003028 <_cleanup_r+0xc>)
 8003020:	f000 f88c 	bl	800313c <_fwalk_reent>
 8003024:	bd10      	pop	{r4, pc}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	08003b59 	.word	0x08003b59

0800302c <__sfmoreglue>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	2568      	movs	r5, #104	; 0x68
 8003030:	1e4a      	subs	r2, r1, #1
 8003032:	4355      	muls	r5, r2
 8003034:	000e      	movs	r6, r1
 8003036:	0029      	movs	r1, r5
 8003038:	3174      	adds	r1, #116	; 0x74
 800303a:	f000 f8a1 	bl	8003180 <_malloc_r>
 800303e:	1e04      	subs	r4, r0, #0
 8003040:	d008      	beq.n	8003054 <__sfmoreglue+0x28>
 8003042:	2100      	movs	r1, #0
 8003044:	002a      	movs	r2, r5
 8003046:	6001      	str	r1, [r0, #0]
 8003048:	6046      	str	r6, [r0, #4]
 800304a:	300c      	adds	r0, #12
 800304c:	60a0      	str	r0, [r4, #8]
 800304e:	3268      	adds	r2, #104	; 0x68
 8003050:	f7ff ff9e 	bl	8002f90 <memset>
 8003054:	0020      	movs	r0, r4
 8003056:	bd70      	pop	{r4, r5, r6, pc}

08003058 <__sinit>:
 8003058:	6983      	ldr	r3, [r0, #24]
 800305a:	b513      	push	{r0, r1, r4, lr}
 800305c:	0004      	movs	r4, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d128      	bne.n	80030b4 <__sinit+0x5c>
 8003062:	6483      	str	r3, [r0, #72]	; 0x48
 8003064:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003066:	6503      	str	r3, [r0, #80]	; 0x50
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <__sinit+0x60>)
 800306a:	4a14      	ldr	r2, [pc, #80]	; (80030bc <__sinit+0x64>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6282      	str	r2, [r0, #40]	; 0x28
 8003070:	9301      	str	r3, [sp, #4]
 8003072:	4298      	cmp	r0, r3
 8003074:	d101      	bne.n	800307a <__sinit+0x22>
 8003076:	2301      	movs	r3, #1
 8003078:	6183      	str	r3, [r0, #24]
 800307a:	0020      	movs	r0, r4
 800307c:	f000 f820 	bl	80030c0 <__sfp>
 8003080:	6060      	str	r0, [r4, #4]
 8003082:	0020      	movs	r0, r4
 8003084:	f000 f81c 	bl	80030c0 <__sfp>
 8003088:	60a0      	str	r0, [r4, #8]
 800308a:	0020      	movs	r0, r4
 800308c:	f000 f818 	bl	80030c0 <__sfp>
 8003090:	2200      	movs	r2, #0
 8003092:	60e0      	str	r0, [r4, #12]
 8003094:	2104      	movs	r1, #4
 8003096:	6860      	ldr	r0, [r4, #4]
 8003098:	f7ff ff9c 	bl	8002fd4 <std>
 800309c:	2201      	movs	r2, #1
 800309e:	2109      	movs	r1, #9
 80030a0:	68a0      	ldr	r0, [r4, #8]
 80030a2:	f7ff ff97 	bl	8002fd4 <std>
 80030a6:	2202      	movs	r2, #2
 80030a8:	2112      	movs	r1, #18
 80030aa:	68e0      	ldr	r0, [r4, #12]
 80030ac:	f7ff ff92 	bl	8002fd4 <std>
 80030b0:	2301      	movs	r3, #1
 80030b2:	61a3      	str	r3, [r4, #24]
 80030b4:	bd13      	pop	{r0, r1, r4, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	08003e74 	.word	0x08003e74
 80030bc:	0800301d 	.word	0x0800301d

080030c0 <__sfp>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <__sfp+0x74>)
 80030c4:	0007      	movs	r7, r0
 80030c6:	681e      	ldr	r6, [r3, #0]
 80030c8:	69b3      	ldr	r3, [r6, #24]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <__sfp+0x14>
 80030ce:	0030      	movs	r0, r6
 80030d0:	f7ff ffc2 	bl	8003058 <__sinit>
 80030d4:	3648      	adds	r6, #72	; 0x48
 80030d6:	68b4      	ldr	r4, [r6, #8]
 80030d8:	6873      	ldr	r3, [r6, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	d504      	bpl.n	80030e8 <__sfp+0x28>
 80030de:	6833      	ldr	r3, [r6, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d007      	beq.n	80030f4 <__sfp+0x34>
 80030e4:	6836      	ldr	r6, [r6, #0]
 80030e6:	e7f6      	b.n	80030d6 <__sfp+0x16>
 80030e8:	220c      	movs	r2, #12
 80030ea:	5ea5      	ldrsh	r5, [r4, r2]
 80030ec:	2d00      	cmp	r5, #0
 80030ee:	d00d      	beq.n	800310c <__sfp+0x4c>
 80030f0:	3468      	adds	r4, #104	; 0x68
 80030f2:	e7f2      	b.n	80030da <__sfp+0x1a>
 80030f4:	2104      	movs	r1, #4
 80030f6:	0038      	movs	r0, r7
 80030f8:	f7ff ff98 	bl	800302c <__sfmoreglue>
 80030fc:	6030      	str	r0, [r6, #0]
 80030fe:	2800      	cmp	r0, #0
 8003100:	d1f0      	bne.n	80030e4 <__sfp+0x24>
 8003102:	230c      	movs	r3, #12
 8003104:	0004      	movs	r4, r0
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	0020      	movs	r0, r4
 800310a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800310c:	0020      	movs	r0, r4
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <__sfp+0x78>)
 8003110:	6665      	str	r5, [r4, #100]	; 0x64
 8003112:	6025      	str	r5, [r4, #0]
 8003114:	6065      	str	r5, [r4, #4]
 8003116:	60a5      	str	r5, [r4, #8]
 8003118:	60e3      	str	r3, [r4, #12]
 800311a:	6125      	str	r5, [r4, #16]
 800311c:	6165      	str	r5, [r4, #20]
 800311e:	61a5      	str	r5, [r4, #24]
 8003120:	2208      	movs	r2, #8
 8003122:	0029      	movs	r1, r5
 8003124:	305c      	adds	r0, #92	; 0x5c
 8003126:	f7ff ff33 	bl	8002f90 <memset>
 800312a:	6365      	str	r5, [r4, #52]	; 0x34
 800312c:	63a5      	str	r5, [r4, #56]	; 0x38
 800312e:	64a5      	str	r5, [r4, #72]	; 0x48
 8003130:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003132:	e7e9      	b.n	8003108 <__sfp+0x48>
 8003134:	08003e74 	.word	0x08003e74
 8003138:	ffff0001 	.word	0xffff0001

0800313c <_fwalk_reent>:
 800313c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800313e:	0004      	movs	r4, r0
 8003140:	0007      	movs	r7, r0
 8003142:	2600      	movs	r6, #0
 8003144:	9101      	str	r1, [sp, #4]
 8003146:	3448      	adds	r4, #72	; 0x48
 8003148:	2c00      	cmp	r4, #0
 800314a:	d101      	bne.n	8003150 <_fwalk_reent+0x14>
 800314c:	0030      	movs	r0, r6
 800314e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003150:	6863      	ldr	r3, [r4, #4]
 8003152:	68a5      	ldr	r5, [r4, #8]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	9b00      	ldr	r3, [sp, #0]
 8003158:	3b01      	subs	r3, #1
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	d501      	bpl.n	8003162 <_fwalk_reent+0x26>
 800315e:	6824      	ldr	r4, [r4, #0]
 8003160:	e7f2      	b.n	8003148 <_fwalk_reent+0xc>
 8003162:	89ab      	ldrh	r3, [r5, #12]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d908      	bls.n	800317a <_fwalk_reent+0x3e>
 8003168:	220e      	movs	r2, #14
 800316a:	5eab      	ldrsh	r3, [r5, r2]
 800316c:	3301      	adds	r3, #1
 800316e:	d004      	beq.n	800317a <_fwalk_reent+0x3e>
 8003170:	0029      	movs	r1, r5
 8003172:	0038      	movs	r0, r7
 8003174:	9b01      	ldr	r3, [sp, #4]
 8003176:	4798      	blx	r3
 8003178:	4306      	orrs	r6, r0
 800317a:	3568      	adds	r5, #104	; 0x68
 800317c:	e7eb      	b.n	8003156 <_fwalk_reent+0x1a>
	...

08003180 <_malloc_r>:
 8003180:	2303      	movs	r3, #3
 8003182:	b570      	push	{r4, r5, r6, lr}
 8003184:	1ccd      	adds	r5, r1, #3
 8003186:	439d      	bics	r5, r3
 8003188:	3508      	adds	r5, #8
 800318a:	0006      	movs	r6, r0
 800318c:	2d0c      	cmp	r5, #12
 800318e:	d21e      	bcs.n	80031ce <_malloc_r+0x4e>
 8003190:	250c      	movs	r5, #12
 8003192:	42a9      	cmp	r1, r5
 8003194:	d81d      	bhi.n	80031d2 <_malloc_r+0x52>
 8003196:	0030      	movs	r0, r6
 8003198:	f000 fd95 	bl	8003cc6 <__malloc_lock>
 800319c:	4a25      	ldr	r2, [pc, #148]	; (8003234 <_malloc_r+0xb4>)
 800319e:	6814      	ldr	r4, [r2, #0]
 80031a0:	0021      	movs	r1, r4
 80031a2:	2900      	cmp	r1, #0
 80031a4:	d119      	bne.n	80031da <_malloc_r+0x5a>
 80031a6:	4c24      	ldr	r4, [pc, #144]	; (8003238 <_malloc_r+0xb8>)
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d103      	bne.n	80031b6 <_malloc_r+0x36>
 80031ae:	0030      	movs	r0, r6
 80031b0:	f000 faf8 	bl	80037a4 <_sbrk_r>
 80031b4:	6020      	str	r0, [r4, #0]
 80031b6:	0029      	movs	r1, r5
 80031b8:	0030      	movs	r0, r6
 80031ba:	f000 faf3 	bl	80037a4 <_sbrk_r>
 80031be:	1c43      	adds	r3, r0, #1
 80031c0:	d12b      	bne.n	800321a <_malloc_r+0x9a>
 80031c2:	230c      	movs	r3, #12
 80031c4:	0030      	movs	r0, r6
 80031c6:	6033      	str	r3, [r6, #0]
 80031c8:	f000 fd7e 	bl	8003cc8 <__malloc_unlock>
 80031cc:	e003      	b.n	80031d6 <_malloc_r+0x56>
 80031ce:	2d00      	cmp	r5, #0
 80031d0:	dadf      	bge.n	8003192 <_malloc_r+0x12>
 80031d2:	230c      	movs	r3, #12
 80031d4:	6033      	str	r3, [r6, #0]
 80031d6:	2000      	movs	r0, #0
 80031d8:	bd70      	pop	{r4, r5, r6, pc}
 80031da:	680b      	ldr	r3, [r1, #0]
 80031dc:	1b5b      	subs	r3, r3, r5
 80031de:	d419      	bmi.n	8003214 <_malloc_r+0x94>
 80031e0:	2b0b      	cmp	r3, #11
 80031e2:	d903      	bls.n	80031ec <_malloc_r+0x6c>
 80031e4:	600b      	str	r3, [r1, #0]
 80031e6:	18cc      	adds	r4, r1, r3
 80031e8:	6025      	str	r5, [r4, #0]
 80031ea:	e003      	b.n	80031f4 <_malloc_r+0x74>
 80031ec:	684b      	ldr	r3, [r1, #4]
 80031ee:	428c      	cmp	r4, r1
 80031f0:	d10d      	bne.n	800320e <_malloc_r+0x8e>
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	0030      	movs	r0, r6
 80031f6:	f000 fd67 	bl	8003cc8 <__malloc_unlock>
 80031fa:	0020      	movs	r0, r4
 80031fc:	2207      	movs	r2, #7
 80031fe:	300b      	adds	r0, #11
 8003200:	1d23      	adds	r3, r4, #4
 8003202:	4390      	bics	r0, r2
 8003204:	1ac3      	subs	r3, r0, r3
 8003206:	d0e7      	beq.n	80031d8 <_malloc_r+0x58>
 8003208:	425a      	negs	r2, r3
 800320a:	50e2      	str	r2, [r4, r3]
 800320c:	e7e4      	b.n	80031d8 <_malloc_r+0x58>
 800320e:	6063      	str	r3, [r4, #4]
 8003210:	000c      	movs	r4, r1
 8003212:	e7ef      	b.n	80031f4 <_malloc_r+0x74>
 8003214:	000c      	movs	r4, r1
 8003216:	6849      	ldr	r1, [r1, #4]
 8003218:	e7c3      	b.n	80031a2 <_malloc_r+0x22>
 800321a:	2303      	movs	r3, #3
 800321c:	1cc4      	adds	r4, r0, #3
 800321e:	439c      	bics	r4, r3
 8003220:	42a0      	cmp	r0, r4
 8003222:	d0e1      	beq.n	80031e8 <_malloc_r+0x68>
 8003224:	1a21      	subs	r1, r4, r0
 8003226:	0030      	movs	r0, r6
 8003228:	f000 fabc 	bl	80037a4 <_sbrk_r>
 800322c:	1c43      	adds	r3, r0, #1
 800322e:	d1db      	bne.n	80031e8 <_malloc_r+0x68>
 8003230:	e7c7      	b.n	80031c2 <_malloc_r+0x42>
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	20000090 	.word	0x20000090
 8003238:	20000094 	.word	0x20000094

0800323c <__sfputc_r>:
 800323c:	6893      	ldr	r3, [r2, #8]
 800323e:	b510      	push	{r4, lr}
 8003240:	3b01      	subs	r3, #1
 8003242:	6093      	str	r3, [r2, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	da04      	bge.n	8003252 <__sfputc_r+0x16>
 8003248:	6994      	ldr	r4, [r2, #24]
 800324a:	42a3      	cmp	r3, r4
 800324c:	db07      	blt.n	800325e <__sfputc_r+0x22>
 800324e:	290a      	cmp	r1, #10
 8003250:	d005      	beq.n	800325e <__sfputc_r+0x22>
 8003252:	6813      	ldr	r3, [r2, #0]
 8003254:	1c58      	adds	r0, r3, #1
 8003256:	6010      	str	r0, [r2, #0]
 8003258:	7019      	strb	r1, [r3, #0]
 800325a:	0008      	movs	r0, r1
 800325c:	bd10      	pop	{r4, pc}
 800325e:	f000 faff 	bl	8003860 <__swbuf_r>
 8003262:	0001      	movs	r1, r0
 8003264:	e7f9      	b.n	800325a <__sfputc_r+0x1e>

08003266 <__sfputs_r>:
 8003266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003268:	0006      	movs	r6, r0
 800326a:	000f      	movs	r7, r1
 800326c:	0014      	movs	r4, r2
 800326e:	18d5      	adds	r5, r2, r3
 8003270:	42ac      	cmp	r4, r5
 8003272:	d101      	bne.n	8003278 <__sfputs_r+0x12>
 8003274:	2000      	movs	r0, #0
 8003276:	e007      	b.n	8003288 <__sfputs_r+0x22>
 8003278:	7821      	ldrb	r1, [r4, #0]
 800327a:	003a      	movs	r2, r7
 800327c:	0030      	movs	r0, r6
 800327e:	f7ff ffdd 	bl	800323c <__sfputc_r>
 8003282:	3401      	adds	r4, #1
 8003284:	1c43      	adds	r3, r0, #1
 8003286:	d1f3      	bne.n	8003270 <__sfputs_r+0xa>
 8003288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800328c <_vfiprintf_r>:
 800328c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328e:	b0a1      	sub	sp, #132	; 0x84
 8003290:	9003      	str	r0, [sp, #12]
 8003292:	000f      	movs	r7, r1
 8003294:	0016      	movs	r6, r2
 8003296:	001d      	movs	r5, r3
 8003298:	2800      	cmp	r0, #0
 800329a:	d005      	beq.n	80032a8 <_vfiprintf_r+0x1c>
 800329c:	6983      	ldr	r3, [r0, #24]
 800329e:	9305      	str	r3, [sp, #20]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <_vfiprintf_r+0x1c>
 80032a4:	f7ff fed8 	bl	8003058 <__sinit>
 80032a8:	4b7b      	ldr	r3, [pc, #492]	; (8003498 <_vfiprintf_r+0x20c>)
 80032aa:	429f      	cmp	r7, r3
 80032ac:	d15c      	bne.n	8003368 <_vfiprintf_r+0xdc>
 80032ae:	9b03      	ldr	r3, [sp, #12]
 80032b0:	685f      	ldr	r7, [r3, #4]
 80032b2:	89bb      	ldrh	r3, [r7, #12]
 80032b4:	071b      	lsls	r3, r3, #28
 80032b6:	d563      	bpl.n	8003380 <_vfiprintf_r+0xf4>
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d060      	beq.n	8003380 <_vfiprintf_r+0xf4>
 80032be:	2300      	movs	r3, #0
 80032c0:	ac08      	add	r4, sp, #32
 80032c2:	6163      	str	r3, [r4, #20]
 80032c4:	3320      	adds	r3, #32
 80032c6:	7663      	strb	r3, [r4, #25]
 80032c8:	3310      	adds	r3, #16
 80032ca:	76a3      	strb	r3, [r4, #26]
 80032cc:	9507      	str	r5, [sp, #28]
 80032ce:	0035      	movs	r5, r6
 80032d0:	782b      	ldrb	r3, [r5, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <_vfiprintf_r+0x4e>
 80032d6:	2b25      	cmp	r3, #37	; 0x25
 80032d8:	d15c      	bne.n	8003394 <_vfiprintf_r+0x108>
 80032da:	1bab      	subs	r3, r5, r6
 80032dc:	9305      	str	r3, [sp, #20]
 80032de:	d00c      	beq.n	80032fa <_vfiprintf_r+0x6e>
 80032e0:	0032      	movs	r2, r6
 80032e2:	0039      	movs	r1, r7
 80032e4:	9803      	ldr	r0, [sp, #12]
 80032e6:	f7ff ffbe 	bl	8003266 <__sfputs_r>
 80032ea:	1c43      	adds	r3, r0, #1
 80032ec:	d100      	bne.n	80032f0 <_vfiprintf_r+0x64>
 80032ee:	e0c4      	b.n	800347a <_vfiprintf_r+0x1ee>
 80032f0:	6962      	ldr	r2, [r4, #20]
 80032f2:	9b05      	ldr	r3, [sp, #20]
 80032f4:	4694      	mov	ip, r2
 80032f6:	4463      	add	r3, ip
 80032f8:	6163      	str	r3, [r4, #20]
 80032fa:	782b      	ldrb	r3, [r5, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d100      	bne.n	8003302 <_vfiprintf_r+0x76>
 8003300:	e0bb      	b.n	800347a <_vfiprintf_r+0x1ee>
 8003302:	2201      	movs	r2, #1
 8003304:	2300      	movs	r3, #0
 8003306:	4252      	negs	r2, r2
 8003308:	6062      	str	r2, [r4, #4]
 800330a:	a904      	add	r1, sp, #16
 800330c:	3254      	adds	r2, #84	; 0x54
 800330e:	1852      	adds	r2, r2, r1
 8003310:	1c6e      	adds	r6, r5, #1
 8003312:	6023      	str	r3, [r4, #0]
 8003314:	60e3      	str	r3, [r4, #12]
 8003316:	60a3      	str	r3, [r4, #8]
 8003318:	7013      	strb	r3, [r2, #0]
 800331a:	65a3      	str	r3, [r4, #88]	; 0x58
 800331c:	7831      	ldrb	r1, [r6, #0]
 800331e:	2205      	movs	r2, #5
 8003320:	485e      	ldr	r0, [pc, #376]	; (800349c <_vfiprintf_r+0x210>)
 8003322:	f000 fcc5 	bl	8003cb0 <memchr>
 8003326:	1c75      	adds	r5, r6, #1
 8003328:	2800      	cmp	r0, #0
 800332a:	d135      	bne.n	8003398 <_vfiprintf_r+0x10c>
 800332c:	6822      	ldr	r2, [r4, #0]
 800332e:	06d3      	lsls	r3, r2, #27
 8003330:	d504      	bpl.n	800333c <_vfiprintf_r+0xb0>
 8003332:	2353      	movs	r3, #83	; 0x53
 8003334:	a904      	add	r1, sp, #16
 8003336:	185b      	adds	r3, r3, r1
 8003338:	2120      	movs	r1, #32
 800333a:	7019      	strb	r1, [r3, #0]
 800333c:	0713      	lsls	r3, r2, #28
 800333e:	d504      	bpl.n	800334a <_vfiprintf_r+0xbe>
 8003340:	2353      	movs	r3, #83	; 0x53
 8003342:	a904      	add	r1, sp, #16
 8003344:	185b      	adds	r3, r3, r1
 8003346:	212b      	movs	r1, #43	; 0x2b
 8003348:	7019      	strb	r1, [r3, #0]
 800334a:	7833      	ldrb	r3, [r6, #0]
 800334c:	2b2a      	cmp	r3, #42	; 0x2a
 800334e:	d02c      	beq.n	80033aa <_vfiprintf_r+0x11e>
 8003350:	0035      	movs	r5, r6
 8003352:	2100      	movs	r1, #0
 8003354:	200a      	movs	r0, #10
 8003356:	68e3      	ldr	r3, [r4, #12]
 8003358:	782a      	ldrb	r2, [r5, #0]
 800335a:	1c6e      	adds	r6, r5, #1
 800335c:	3a30      	subs	r2, #48	; 0x30
 800335e:	2a09      	cmp	r2, #9
 8003360:	d964      	bls.n	800342c <_vfiprintf_r+0x1a0>
 8003362:	2900      	cmp	r1, #0
 8003364:	d02e      	beq.n	80033c4 <_vfiprintf_r+0x138>
 8003366:	e026      	b.n	80033b6 <_vfiprintf_r+0x12a>
 8003368:	4b4d      	ldr	r3, [pc, #308]	; (80034a0 <_vfiprintf_r+0x214>)
 800336a:	429f      	cmp	r7, r3
 800336c:	d102      	bne.n	8003374 <_vfiprintf_r+0xe8>
 800336e:	9b03      	ldr	r3, [sp, #12]
 8003370:	689f      	ldr	r7, [r3, #8]
 8003372:	e79e      	b.n	80032b2 <_vfiprintf_r+0x26>
 8003374:	4b4b      	ldr	r3, [pc, #300]	; (80034a4 <_vfiprintf_r+0x218>)
 8003376:	429f      	cmp	r7, r3
 8003378:	d19b      	bne.n	80032b2 <_vfiprintf_r+0x26>
 800337a:	9b03      	ldr	r3, [sp, #12]
 800337c:	68df      	ldr	r7, [r3, #12]
 800337e:	e798      	b.n	80032b2 <_vfiprintf_r+0x26>
 8003380:	0039      	movs	r1, r7
 8003382:	9803      	ldr	r0, [sp, #12]
 8003384:	f000 fad6 	bl	8003934 <__swsetup_r>
 8003388:	2800      	cmp	r0, #0
 800338a:	d098      	beq.n	80032be <_vfiprintf_r+0x32>
 800338c:	2001      	movs	r0, #1
 800338e:	4240      	negs	r0, r0
 8003390:	b021      	add	sp, #132	; 0x84
 8003392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003394:	3501      	adds	r5, #1
 8003396:	e79b      	b.n	80032d0 <_vfiprintf_r+0x44>
 8003398:	4b40      	ldr	r3, [pc, #256]	; (800349c <_vfiprintf_r+0x210>)
 800339a:	6822      	ldr	r2, [r4, #0]
 800339c:	1ac0      	subs	r0, r0, r3
 800339e:	2301      	movs	r3, #1
 80033a0:	4083      	lsls	r3, r0
 80033a2:	4313      	orrs	r3, r2
 80033a4:	6023      	str	r3, [r4, #0]
 80033a6:	002e      	movs	r6, r5
 80033a8:	e7b8      	b.n	800331c <_vfiprintf_r+0x90>
 80033aa:	9b07      	ldr	r3, [sp, #28]
 80033ac:	1d19      	adds	r1, r3, #4
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	9107      	str	r1, [sp, #28]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	db01      	blt.n	80033ba <_vfiprintf_r+0x12e>
 80033b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80033b8:	e004      	b.n	80033c4 <_vfiprintf_r+0x138>
 80033ba:	425b      	negs	r3, r3
 80033bc:	60e3      	str	r3, [r4, #12]
 80033be:	2302      	movs	r3, #2
 80033c0:	4313      	orrs	r3, r2
 80033c2:	6023      	str	r3, [r4, #0]
 80033c4:	782b      	ldrb	r3, [r5, #0]
 80033c6:	2b2e      	cmp	r3, #46	; 0x2e
 80033c8:	d10a      	bne.n	80033e0 <_vfiprintf_r+0x154>
 80033ca:	786b      	ldrb	r3, [r5, #1]
 80033cc:	2b2a      	cmp	r3, #42	; 0x2a
 80033ce:	d135      	bne.n	800343c <_vfiprintf_r+0x1b0>
 80033d0:	9b07      	ldr	r3, [sp, #28]
 80033d2:	3502      	adds	r5, #2
 80033d4:	1d1a      	adds	r2, r3, #4
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	9207      	str	r2, [sp, #28]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	db2b      	blt.n	8003436 <_vfiprintf_r+0x1aa>
 80033de:	9309      	str	r3, [sp, #36]	; 0x24
 80033e0:	4e31      	ldr	r6, [pc, #196]	; (80034a8 <_vfiprintf_r+0x21c>)
 80033e2:	7829      	ldrb	r1, [r5, #0]
 80033e4:	2203      	movs	r2, #3
 80033e6:	0030      	movs	r0, r6
 80033e8:	f000 fc62 	bl	8003cb0 <memchr>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	d006      	beq.n	80033fe <_vfiprintf_r+0x172>
 80033f0:	2340      	movs	r3, #64	; 0x40
 80033f2:	1b80      	subs	r0, r0, r6
 80033f4:	4083      	lsls	r3, r0
 80033f6:	6822      	ldr	r2, [r4, #0]
 80033f8:	3501      	adds	r5, #1
 80033fa:	4313      	orrs	r3, r2
 80033fc:	6023      	str	r3, [r4, #0]
 80033fe:	7829      	ldrb	r1, [r5, #0]
 8003400:	2206      	movs	r2, #6
 8003402:	482a      	ldr	r0, [pc, #168]	; (80034ac <_vfiprintf_r+0x220>)
 8003404:	1c6e      	adds	r6, r5, #1
 8003406:	7621      	strb	r1, [r4, #24]
 8003408:	f000 fc52 	bl	8003cb0 <memchr>
 800340c:	2800      	cmp	r0, #0
 800340e:	d03a      	beq.n	8003486 <_vfiprintf_r+0x1fa>
 8003410:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <_vfiprintf_r+0x224>)
 8003412:	2b00      	cmp	r3, #0
 8003414:	d125      	bne.n	8003462 <_vfiprintf_r+0x1d6>
 8003416:	2207      	movs	r2, #7
 8003418:	9b07      	ldr	r3, [sp, #28]
 800341a:	3307      	adds	r3, #7
 800341c:	4393      	bics	r3, r2
 800341e:	3308      	adds	r3, #8
 8003420:	9307      	str	r3, [sp, #28]
 8003422:	6963      	ldr	r3, [r4, #20]
 8003424:	9a04      	ldr	r2, [sp, #16]
 8003426:	189b      	adds	r3, r3, r2
 8003428:	6163      	str	r3, [r4, #20]
 800342a:	e750      	b.n	80032ce <_vfiprintf_r+0x42>
 800342c:	4343      	muls	r3, r0
 800342e:	2101      	movs	r1, #1
 8003430:	189b      	adds	r3, r3, r2
 8003432:	0035      	movs	r5, r6
 8003434:	e790      	b.n	8003358 <_vfiprintf_r+0xcc>
 8003436:	2301      	movs	r3, #1
 8003438:	425b      	negs	r3, r3
 800343a:	e7d0      	b.n	80033de <_vfiprintf_r+0x152>
 800343c:	2300      	movs	r3, #0
 800343e:	200a      	movs	r0, #10
 8003440:	001a      	movs	r2, r3
 8003442:	3501      	adds	r5, #1
 8003444:	6063      	str	r3, [r4, #4]
 8003446:	7829      	ldrb	r1, [r5, #0]
 8003448:	1c6e      	adds	r6, r5, #1
 800344a:	3930      	subs	r1, #48	; 0x30
 800344c:	2909      	cmp	r1, #9
 800344e:	d903      	bls.n	8003458 <_vfiprintf_r+0x1cc>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0c5      	beq.n	80033e0 <_vfiprintf_r+0x154>
 8003454:	9209      	str	r2, [sp, #36]	; 0x24
 8003456:	e7c3      	b.n	80033e0 <_vfiprintf_r+0x154>
 8003458:	4342      	muls	r2, r0
 800345a:	2301      	movs	r3, #1
 800345c:	1852      	adds	r2, r2, r1
 800345e:	0035      	movs	r5, r6
 8003460:	e7f1      	b.n	8003446 <_vfiprintf_r+0x1ba>
 8003462:	ab07      	add	r3, sp, #28
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	003a      	movs	r2, r7
 8003468:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <_vfiprintf_r+0x228>)
 800346a:	0021      	movs	r1, r4
 800346c:	9803      	ldr	r0, [sp, #12]
 800346e:	e000      	b.n	8003472 <_vfiprintf_r+0x1e6>
 8003470:	bf00      	nop
 8003472:	9004      	str	r0, [sp, #16]
 8003474:	9b04      	ldr	r3, [sp, #16]
 8003476:	3301      	adds	r3, #1
 8003478:	d1d3      	bne.n	8003422 <_vfiprintf_r+0x196>
 800347a:	89bb      	ldrh	r3, [r7, #12]
 800347c:	065b      	lsls	r3, r3, #25
 800347e:	d500      	bpl.n	8003482 <_vfiprintf_r+0x1f6>
 8003480:	e784      	b.n	800338c <_vfiprintf_r+0x100>
 8003482:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003484:	e784      	b.n	8003390 <_vfiprintf_r+0x104>
 8003486:	ab07      	add	r3, sp, #28
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	003a      	movs	r2, r7
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <_vfiprintf_r+0x228>)
 800348e:	0021      	movs	r1, r4
 8003490:	9803      	ldr	r0, [sp, #12]
 8003492:	f000 f87f 	bl	8003594 <_printf_i>
 8003496:	e7ec      	b.n	8003472 <_vfiprintf_r+0x1e6>
 8003498:	08003e98 	.word	0x08003e98
 800349c:	08003ed8 	.word	0x08003ed8
 80034a0:	08003eb8 	.word	0x08003eb8
 80034a4:	08003e78 	.word	0x08003e78
 80034a8:	08003ede 	.word	0x08003ede
 80034ac:	08003ee2 	.word	0x08003ee2
 80034b0:	00000000 	.word	0x00000000
 80034b4:	08003267 	.word	0x08003267

080034b8 <_printf_common>:
 80034b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034ba:	0015      	movs	r5, r2
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	688a      	ldr	r2, [r1, #8]
 80034c0:	690b      	ldr	r3, [r1, #16]
 80034c2:	9000      	str	r0, [sp, #0]
 80034c4:	000c      	movs	r4, r1
 80034c6:	4293      	cmp	r3, r2
 80034c8:	da00      	bge.n	80034cc <_printf_common+0x14>
 80034ca:	0013      	movs	r3, r2
 80034cc:	0022      	movs	r2, r4
 80034ce:	602b      	str	r3, [r5, #0]
 80034d0:	3243      	adds	r2, #67	; 0x43
 80034d2:	7812      	ldrb	r2, [r2, #0]
 80034d4:	2a00      	cmp	r2, #0
 80034d6:	d001      	beq.n	80034dc <_printf_common+0x24>
 80034d8:	3301      	adds	r3, #1
 80034da:	602b      	str	r3, [r5, #0]
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	069b      	lsls	r3, r3, #26
 80034e0:	d502      	bpl.n	80034e8 <_printf_common+0x30>
 80034e2:	682b      	ldr	r3, [r5, #0]
 80034e4:	3302      	adds	r3, #2
 80034e6:	602b      	str	r3, [r5, #0]
 80034e8:	2706      	movs	r7, #6
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	401f      	ands	r7, r3
 80034ee:	d027      	beq.n	8003540 <_printf_common+0x88>
 80034f0:	0023      	movs	r3, r4
 80034f2:	3343      	adds	r3, #67	; 0x43
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	1e5a      	subs	r2, r3, #1
 80034f8:	4193      	sbcs	r3, r2
 80034fa:	6822      	ldr	r2, [r4, #0]
 80034fc:	0692      	lsls	r2, r2, #26
 80034fe:	d430      	bmi.n	8003562 <_printf_common+0xaa>
 8003500:	0022      	movs	r2, r4
 8003502:	9901      	ldr	r1, [sp, #4]
 8003504:	3243      	adds	r2, #67	; 0x43
 8003506:	9800      	ldr	r0, [sp, #0]
 8003508:	9e08      	ldr	r6, [sp, #32]
 800350a:	47b0      	blx	r6
 800350c:	1c43      	adds	r3, r0, #1
 800350e:	d025      	beq.n	800355c <_printf_common+0xa4>
 8003510:	2306      	movs	r3, #6
 8003512:	6820      	ldr	r0, [r4, #0]
 8003514:	682a      	ldr	r2, [r5, #0]
 8003516:	68e1      	ldr	r1, [r4, #12]
 8003518:	4003      	ands	r3, r0
 800351a:	2500      	movs	r5, #0
 800351c:	2b04      	cmp	r3, #4
 800351e:	d103      	bne.n	8003528 <_printf_common+0x70>
 8003520:	1a8d      	subs	r5, r1, r2
 8003522:	43eb      	mvns	r3, r5
 8003524:	17db      	asrs	r3, r3, #31
 8003526:	401d      	ands	r5, r3
 8003528:	68a3      	ldr	r3, [r4, #8]
 800352a:	6922      	ldr	r2, [r4, #16]
 800352c:	4293      	cmp	r3, r2
 800352e:	dd01      	ble.n	8003534 <_printf_common+0x7c>
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	18ed      	adds	r5, r5, r3
 8003534:	2700      	movs	r7, #0
 8003536:	42bd      	cmp	r5, r7
 8003538:	d120      	bne.n	800357c <_printf_common+0xc4>
 800353a:	2000      	movs	r0, #0
 800353c:	e010      	b.n	8003560 <_printf_common+0xa8>
 800353e:	3701      	adds	r7, #1
 8003540:	68e3      	ldr	r3, [r4, #12]
 8003542:	682a      	ldr	r2, [r5, #0]
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	42bb      	cmp	r3, r7
 8003548:	ddd2      	ble.n	80034f0 <_printf_common+0x38>
 800354a:	0022      	movs	r2, r4
 800354c:	2301      	movs	r3, #1
 800354e:	3219      	adds	r2, #25
 8003550:	9901      	ldr	r1, [sp, #4]
 8003552:	9800      	ldr	r0, [sp, #0]
 8003554:	9e08      	ldr	r6, [sp, #32]
 8003556:	47b0      	blx	r6
 8003558:	1c43      	adds	r3, r0, #1
 800355a:	d1f0      	bne.n	800353e <_printf_common+0x86>
 800355c:	2001      	movs	r0, #1
 800355e:	4240      	negs	r0, r0
 8003560:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003562:	2030      	movs	r0, #48	; 0x30
 8003564:	18e1      	adds	r1, r4, r3
 8003566:	3143      	adds	r1, #67	; 0x43
 8003568:	7008      	strb	r0, [r1, #0]
 800356a:	0021      	movs	r1, r4
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	3145      	adds	r1, #69	; 0x45
 8003570:	7809      	ldrb	r1, [r1, #0]
 8003572:	18a2      	adds	r2, r4, r2
 8003574:	3243      	adds	r2, #67	; 0x43
 8003576:	3302      	adds	r3, #2
 8003578:	7011      	strb	r1, [r2, #0]
 800357a:	e7c1      	b.n	8003500 <_printf_common+0x48>
 800357c:	0022      	movs	r2, r4
 800357e:	2301      	movs	r3, #1
 8003580:	321a      	adds	r2, #26
 8003582:	9901      	ldr	r1, [sp, #4]
 8003584:	9800      	ldr	r0, [sp, #0]
 8003586:	9e08      	ldr	r6, [sp, #32]
 8003588:	47b0      	blx	r6
 800358a:	1c43      	adds	r3, r0, #1
 800358c:	d0e6      	beq.n	800355c <_printf_common+0xa4>
 800358e:	3701      	adds	r7, #1
 8003590:	e7d1      	b.n	8003536 <_printf_common+0x7e>
	...

08003594 <_printf_i>:
 8003594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003596:	b089      	sub	sp, #36	; 0x24
 8003598:	9204      	str	r2, [sp, #16]
 800359a:	000a      	movs	r2, r1
 800359c:	3243      	adds	r2, #67	; 0x43
 800359e:	9305      	str	r3, [sp, #20]
 80035a0:	9003      	str	r0, [sp, #12]
 80035a2:	9202      	str	r2, [sp, #8]
 80035a4:	7e0a      	ldrb	r2, [r1, #24]
 80035a6:	000c      	movs	r4, r1
 80035a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035aa:	2a6e      	cmp	r2, #110	; 0x6e
 80035ac:	d100      	bne.n	80035b0 <_printf_i+0x1c>
 80035ae:	e086      	b.n	80036be <_printf_i+0x12a>
 80035b0:	d81f      	bhi.n	80035f2 <_printf_i+0x5e>
 80035b2:	2a63      	cmp	r2, #99	; 0x63
 80035b4:	d033      	beq.n	800361e <_printf_i+0x8a>
 80035b6:	d808      	bhi.n	80035ca <_printf_i+0x36>
 80035b8:	2a00      	cmp	r2, #0
 80035ba:	d100      	bne.n	80035be <_printf_i+0x2a>
 80035bc:	e08c      	b.n	80036d8 <_printf_i+0x144>
 80035be:	2a58      	cmp	r2, #88	; 0x58
 80035c0:	d04d      	beq.n	800365e <_printf_i+0xca>
 80035c2:	0025      	movs	r5, r4
 80035c4:	3542      	adds	r5, #66	; 0x42
 80035c6:	702a      	strb	r2, [r5, #0]
 80035c8:	e030      	b.n	800362c <_printf_i+0x98>
 80035ca:	2a64      	cmp	r2, #100	; 0x64
 80035cc:	d001      	beq.n	80035d2 <_printf_i+0x3e>
 80035ce:	2a69      	cmp	r2, #105	; 0x69
 80035d0:	d1f7      	bne.n	80035c2 <_printf_i+0x2e>
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	6825      	ldr	r5, [r4, #0]
 80035d6:	1d0a      	adds	r2, r1, #4
 80035d8:	0628      	lsls	r0, r5, #24
 80035da:	d529      	bpl.n	8003630 <_printf_i+0x9c>
 80035dc:	6808      	ldr	r0, [r1, #0]
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	2800      	cmp	r0, #0
 80035e2:	da03      	bge.n	80035ec <_printf_i+0x58>
 80035e4:	232d      	movs	r3, #45	; 0x2d
 80035e6:	9a02      	ldr	r2, [sp, #8]
 80035e8:	4240      	negs	r0, r0
 80035ea:	7013      	strb	r3, [r2, #0]
 80035ec:	4e6b      	ldr	r6, [pc, #428]	; (800379c <_printf_i+0x208>)
 80035ee:	270a      	movs	r7, #10
 80035f0:	e04f      	b.n	8003692 <_printf_i+0xfe>
 80035f2:	2a73      	cmp	r2, #115	; 0x73
 80035f4:	d074      	beq.n	80036e0 <_printf_i+0x14c>
 80035f6:	d808      	bhi.n	800360a <_printf_i+0x76>
 80035f8:	2a6f      	cmp	r2, #111	; 0x6f
 80035fa:	d01f      	beq.n	800363c <_printf_i+0xa8>
 80035fc:	2a70      	cmp	r2, #112	; 0x70
 80035fe:	d1e0      	bne.n	80035c2 <_printf_i+0x2e>
 8003600:	2220      	movs	r2, #32
 8003602:	6809      	ldr	r1, [r1, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	6022      	str	r2, [r4, #0]
 8003608:	e003      	b.n	8003612 <_printf_i+0x7e>
 800360a:	2a75      	cmp	r2, #117	; 0x75
 800360c:	d016      	beq.n	800363c <_printf_i+0xa8>
 800360e:	2a78      	cmp	r2, #120	; 0x78
 8003610:	d1d7      	bne.n	80035c2 <_printf_i+0x2e>
 8003612:	0022      	movs	r2, r4
 8003614:	2178      	movs	r1, #120	; 0x78
 8003616:	3245      	adds	r2, #69	; 0x45
 8003618:	7011      	strb	r1, [r2, #0]
 800361a:	4e61      	ldr	r6, [pc, #388]	; (80037a0 <_printf_i+0x20c>)
 800361c:	e022      	b.n	8003664 <_printf_i+0xd0>
 800361e:	0025      	movs	r5, r4
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	3542      	adds	r5, #66	; 0x42
 8003624:	1d11      	adds	r1, r2, #4
 8003626:	6019      	str	r1, [r3, #0]
 8003628:	6813      	ldr	r3, [r2, #0]
 800362a:	702b      	strb	r3, [r5, #0]
 800362c:	2301      	movs	r3, #1
 800362e:	e065      	b.n	80036fc <_printf_i+0x168>
 8003630:	6808      	ldr	r0, [r1, #0]
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	0669      	lsls	r1, r5, #25
 8003636:	d5d3      	bpl.n	80035e0 <_printf_i+0x4c>
 8003638:	b200      	sxth	r0, r0
 800363a:	e7d1      	b.n	80035e0 <_printf_i+0x4c>
 800363c:	6819      	ldr	r1, [r3, #0]
 800363e:	6825      	ldr	r5, [r4, #0]
 8003640:	1d08      	adds	r0, r1, #4
 8003642:	6018      	str	r0, [r3, #0]
 8003644:	6808      	ldr	r0, [r1, #0]
 8003646:	062e      	lsls	r6, r5, #24
 8003648:	d505      	bpl.n	8003656 <_printf_i+0xc2>
 800364a:	4e54      	ldr	r6, [pc, #336]	; (800379c <_printf_i+0x208>)
 800364c:	2708      	movs	r7, #8
 800364e:	2a6f      	cmp	r2, #111	; 0x6f
 8003650:	d01b      	beq.n	800368a <_printf_i+0xf6>
 8003652:	270a      	movs	r7, #10
 8003654:	e019      	b.n	800368a <_printf_i+0xf6>
 8003656:	066d      	lsls	r5, r5, #25
 8003658:	d5f7      	bpl.n	800364a <_printf_i+0xb6>
 800365a:	b280      	uxth	r0, r0
 800365c:	e7f5      	b.n	800364a <_printf_i+0xb6>
 800365e:	3145      	adds	r1, #69	; 0x45
 8003660:	4e4e      	ldr	r6, [pc, #312]	; (800379c <_printf_i+0x208>)
 8003662:	700a      	strb	r2, [r1, #0]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	6822      	ldr	r2, [r4, #0]
 8003668:	1d01      	adds	r1, r0, #4
 800366a:	6800      	ldr	r0, [r0, #0]
 800366c:	6019      	str	r1, [r3, #0]
 800366e:	0615      	lsls	r5, r2, #24
 8003670:	d521      	bpl.n	80036b6 <_printf_i+0x122>
 8003672:	07d3      	lsls	r3, r2, #31
 8003674:	d502      	bpl.n	800367c <_printf_i+0xe8>
 8003676:	2320      	movs	r3, #32
 8003678:	431a      	orrs	r2, r3
 800367a:	6022      	str	r2, [r4, #0]
 800367c:	2710      	movs	r7, #16
 800367e:	2800      	cmp	r0, #0
 8003680:	d103      	bne.n	800368a <_printf_i+0xf6>
 8003682:	2320      	movs	r3, #32
 8003684:	6822      	ldr	r2, [r4, #0]
 8003686:	439a      	bics	r2, r3
 8003688:	6022      	str	r2, [r4, #0]
 800368a:	0023      	movs	r3, r4
 800368c:	2200      	movs	r2, #0
 800368e:	3343      	adds	r3, #67	; 0x43
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	6863      	ldr	r3, [r4, #4]
 8003694:	60a3      	str	r3, [r4, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	db58      	blt.n	800374c <_printf_i+0x1b8>
 800369a:	2204      	movs	r2, #4
 800369c:	6821      	ldr	r1, [r4, #0]
 800369e:	4391      	bics	r1, r2
 80036a0:	6021      	str	r1, [r4, #0]
 80036a2:	2800      	cmp	r0, #0
 80036a4:	d154      	bne.n	8003750 <_printf_i+0x1bc>
 80036a6:	9d02      	ldr	r5, [sp, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d05a      	beq.n	8003762 <_printf_i+0x1ce>
 80036ac:	0025      	movs	r5, r4
 80036ae:	7833      	ldrb	r3, [r6, #0]
 80036b0:	3542      	adds	r5, #66	; 0x42
 80036b2:	702b      	strb	r3, [r5, #0]
 80036b4:	e055      	b.n	8003762 <_printf_i+0x1ce>
 80036b6:	0655      	lsls	r5, r2, #25
 80036b8:	d5db      	bpl.n	8003672 <_printf_i+0xde>
 80036ba:	b280      	uxth	r0, r0
 80036bc:	e7d9      	b.n	8003672 <_printf_i+0xde>
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	680d      	ldr	r5, [r1, #0]
 80036c2:	1d10      	adds	r0, r2, #4
 80036c4:	6949      	ldr	r1, [r1, #20]
 80036c6:	6018      	str	r0, [r3, #0]
 80036c8:	6813      	ldr	r3, [r2, #0]
 80036ca:	062e      	lsls	r6, r5, #24
 80036cc:	d501      	bpl.n	80036d2 <_printf_i+0x13e>
 80036ce:	6019      	str	r1, [r3, #0]
 80036d0:	e002      	b.n	80036d8 <_printf_i+0x144>
 80036d2:	066d      	lsls	r5, r5, #25
 80036d4:	d5fb      	bpl.n	80036ce <_printf_i+0x13a>
 80036d6:	8019      	strh	r1, [r3, #0]
 80036d8:	2300      	movs	r3, #0
 80036da:	9d02      	ldr	r5, [sp, #8]
 80036dc:	6123      	str	r3, [r4, #16]
 80036de:	e04f      	b.n	8003780 <_printf_i+0x1ec>
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	1d11      	adds	r1, r2, #4
 80036e4:	6019      	str	r1, [r3, #0]
 80036e6:	6815      	ldr	r5, [r2, #0]
 80036e8:	2100      	movs	r1, #0
 80036ea:	6862      	ldr	r2, [r4, #4]
 80036ec:	0028      	movs	r0, r5
 80036ee:	f000 fadf 	bl	8003cb0 <memchr>
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d001      	beq.n	80036fa <_printf_i+0x166>
 80036f6:	1b40      	subs	r0, r0, r5
 80036f8:	6060      	str	r0, [r4, #4]
 80036fa:	6863      	ldr	r3, [r4, #4]
 80036fc:	6123      	str	r3, [r4, #16]
 80036fe:	2300      	movs	r3, #0
 8003700:	9a02      	ldr	r2, [sp, #8]
 8003702:	7013      	strb	r3, [r2, #0]
 8003704:	e03c      	b.n	8003780 <_printf_i+0x1ec>
 8003706:	6923      	ldr	r3, [r4, #16]
 8003708:	002a      	movs	r2, r5
 800370a:	9904      	ldr	r1, [sp, #16]
 800370c:	9803      	ldr	r0, [sp, #12]
 800370e:	9d05      	ldr	r5, [sp, #20]
 8003710:	47a8      	blx	r5
 8003712:	1c43      	adds	r3, r0, #1
 8003714:	d03e      	beq.n	8003794 <_printf_i+0x200>
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	079b      	lsls	r3, r3, #30
 800371a:	d415      	bmi.n	8003748 <_printf_i+0x1b4>
 800371c:	9b07      	ldr	r3, [sp, #28]
 800371e:	68e0      	ldr	r0, [r4, #12]
 8003720:	4298      	cmp	r0, r3
 8003722:	da39      	bge.n	8003798 <_printf_i+0x204>
 8003724:	0018      	movs	r0, r3
 8003726:	e037      	b.n	8003798 <_printf_i+0x204>
 8003728:	0022      	movs	r2, r4
 800372a:	2301      	movs	r3, #1
 800372c:	3219      	adds	r2, #25
 800372e:	9904      	ldr	r1, [sp, #16]
 8003730:	9803      	ldr	r0, [sp, #12]
 8003732:	9e05      	ldr	r6, [sp, #20]
 8003734:	47b0      	blx	r6
 8003736:	1c43      	adds	r3, r0, #1
 8003738:	d02c      	beq.n	8003794 <_printf_i+0x200>
 800373a:	3501      	adds	r5, #1
 800373c:	68e3      	ldr	r3, [r4, #12]
 800373e:	9a07      	ldr	r2, [sp, #28]
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	42ab      	cmp	r3, r5
 8003744:	dcf0      	bgt.n	8003728 <_printf_i+0x194>
 8003746:	e7e9      	b.n	800371c <_printf_i+0x188>
 8003748:	2500      	movs	r5, #0
 800374a:	e7f7      	b.n	800373c <_printf_i+0x1a8>
 800374c:	2800      	cmp	r0, #0
 800374e:	d0ad      	beq.n	80036ac <_printf_i+0x118>
 8003750:	9d02      	ldr	r5, [sp, #8]
 8003752:	0039      	movs	r1, r7
 8003754:	f7fc fd5e 	bl	8000214 <__aeabi_uidivmod>
 8003758:	5c73      	ldrb	r3, [r6, r1]
 800375a:	3d01      	subs	r5, #1
 800375c:	702b      	strb	r3, [r5, #0]
 800375e:	2800      	cmp	r0, #0
 8003760:	d1f7      	bne.n	8003752 <_printf_i+0x1be>
 8003762:	2f08      	cmp	r7, #8
 8003764:	d109      	bne.n	800377a <_printf_i+0x1e6>
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	07db      	lsls	r3, r3, #31
 800376a:	d506      	bpl.n	800377a <_printf_i+0x1e6>
 800376c:	6863      	ldr	r3, [r4, #4]
 800376e:	6922      	ldr	r2, [r4, #16]
 8003770:	4293      	cmp	r3, r2
 8003772:	dc02      	bgt.n	800377a <_printf_i+0x1e6>
 8003774:	2330      	movs	r3, #48	; 0x30
 8003776:	3d01      	subs	r5, #1
 8003778:	702b      	strb	r3, [r5, #0]
 800377a:	9b02      	ldr	r3, [sp, #8]
 800377c:	1b5b      	subs	r3, r3, r5
 800377e:	6123      	str	r3, [r4, #16]
 8003780:	9b05      	ldr	r3, [sp, #20]
 8003782:	aa07      	add	r2, sp, #28
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	0021      	movs	r1, r4
 8003788:	9b04      	ldr	r3, [sp, #16]
 800378a:	9803      	ldr	r0, [sp, #12]
 800378c:	f7ff fe94 	bl	80034b8 <_printf_common>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d1b8      	bne.n	8003706 <_printf_i+0x172>
 8003794:	2001      	movs	r0, #1
 8003796:	4240      	negs	r0, r0
 8003798:	b009      	add	sp, #36	; 0x24
 800379a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800379c:	08003ee9 	.word	0x08003ee9
 80037a0:	08003efa 	.word	0x08003efa

080037a4 <_sbrk_r>:
 80037a4:	2300      	movs	r3, #0
 80037a6:	b570      	push	{r4, r5, r6, lr}
 80037a8:	4c06      	ldr	r4, [pc, #24]	; (80037c4 <_sbrk_r+0x20>)
 80037aa:	0005      	movs	r5, r0
 80037ac:	0008      	movs	r0, r1
 80037ae:	6023      	str	r3, [r4, #0]
 80037b0:	f7fd fa1a 	bl	8000be8 <_sbrk>
 80037b4:	1c43      	adds	r3, r0, #1
 80037b6:	d103      	bne.n	80037c0 <_sbrk_r+0x1c>
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d000      	beq.n	80037c0 <_sbrk_r+0x1c>
 80037be:	602b      	str	r3, [r5, #0]
 80037c0:	bd70      	pop	{r4, r5, r6, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	20000184 	.word	0x20000184

080037c8 <__sread>:
 80037c8:	b570      	push	{r4, r5, r6, lr}
 80037ca:	000c      	movs	r4, r1
 80037cc:	250e      	movs	r5, #14
 80037ce:	5f49      	ldrsh	r1, [r1, r5]
 80037d0:	f000 fac6 	bl	8003d60 <_read_r>
 80037d4:	2800      	cmp	r0, #0
 80037d6:	db03      	blt.n	80037e0 <__sread+0x18>
 80037d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037da:	181b      	adds	r3, r3, r0
 80037dc:	6563      	str	r3, [r4, #84]	; 0x54
 80037de:	bd70      	pop	{r4, r5, r6, pc}
 80037e0:	89a3      	ldrh	r3, [r4, #12]
 80037e2:	4a02      	ldr	r2, [pc, #8]	; (80037ec <__sread+0x24>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	81a3      	strh	r3, [r4, #12]
 80037e8:	e7f9      	b.n	80037de <__sread+0x16>
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	ffffefff 	.word	0xffffefff

080037f0 <__swrite>:
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f2:	001f      	movs	r7, r3
 80037f4:	898b      	ldrh	r3, [r1, #12]
 80037f6:	0005      	movs	r5, r0
 80037f8:	000c      	movs	r4, r1
 80037fa:	0016      	movs	r6, r2
 80037fc:	05db      	lsls	r3, r3, #23
 80037fe:	d505      	bpl.n	800380c <__swrite+0x1c>
 8003800:	230e      	movs	r3, #14
 8003802:	5ec9      	ldrsh	r1, [r1, r3]
 8003804:	2200      	movs	r2, #0
 8003806:	2302      	movs	r3, #2
 8003808:	f000 f9d2 	bl	8003bb0 <_lseek_r>
 800380c:	89a3      	ldrh	r3, [r4, #12]
 800380e:	4a05      	ldr	r2, [pc, #20]	; (8003824 <__swrite+0x34>)
 8003810:	0028      	movs	r0, r5
 8003812:	4013      	ands	r3, r2
 8003814:	81a3      	strh	r3, [r4, #12]
 8003816:	0032      	movs	r2, r6
 8003818:	230e      	movs	r3, #14
 800381a:	5ee1      	ldrsh	r1, [r4, r3]
 800381c:	003b      	movs	r3, r7
 800381e:	f000 f875 	bl	800390c <_write_r>
 8003822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003824:	ffffefff 	.word	0xffffefff

08003828 <__sseek>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	000c      	movs	r4, r1
 800382c:	250e      	movs	r5, #14
 800382e:	5f49      	ldrsh	r1, [r1, r5]
 8003830:	f000 f9be 	bl	8003bb0 <_lseek_r>
 8003834:	89a3      	ldrh	r3, [r4, #12]
 8003836:	1c42      	adds	r2, r0, #1
 8003838:	d103      	bne.n	8003842 <__sseek+0x1a>
 800383a:	4a05      	ldr	r2, [pc, #20]	; (8003850 <__sseek+0x28>)
 800383c:	4013      	ands	r3, r2
 800383e:	81a3      	strh	r3, [r4, #12]
 8003840:	bd70      	pop	{r4, r5, r6, pc}
 8003842:	2280      	movs	r2, #128	; 0x80
 8003844:	0152      	lsls	r2, r2, #5
 8003846:	4313      	orrs	r3, r2
 8003848:	81a3      	strh	r3, [r4, #12]
 800384a:	6560      	str	r0, [r4, #84]	; 0x54
 800384c:	e7f8      	b.n	8003840 <__sseek+0x18>
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	ffffefff 	.word	0xffffefff

08003854 <__sclose>:
 8003854:	b510      	push	{r4, lr}
 8003856:	230e      	movs	r3, #14
 8003858:	5ec9      	ldrsh	r1, [r1, r3]
 800385a:	f000 f8e1 	bl	8003a20 <_close_r>
 800385e:	bd10      	pop	{r4, pc}

08003860 <__swbuf_r>:
 8003860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003862:	0005      	movs	r5, r0
 8003864:	000e      	movs	r6, r1
 8003866:	0014      	movs	r4, r2
 8003868:	2800      	cmp	r0, #0
 800386a:	d004      	beq.n	8003876 <__swbuf_r+0x16>
 800386c:	6983      	ldr	r3, [r0, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <__swbuf_r+0x16>
 8003872:	f7ff fbf1 	bl	8003058 <__sinit>
 8003876:	4b22      	ldr	r3, [pc, #136]	; (8003900 <__swbuf_r+0xa0>)
 8003878:	429c      	cmp	r4, r3
 800387a:	d12d      	bne.n	80038d8 <__swbuf_r+0x78>
 800387c:	686c      	ldr	r4, [r5, #4]
 800387e:	69a3      	ldr	r3, [r4, #24]
 8003880:	60a3      	str	r3, [r4, #8]
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	071b      	lsls	r3, r3, #28
 8003886:	d531      	bpl.n	80038ec <__swbuf_r+0x8c>
 8003888:	6923      	ldr	r3, [r4, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d02e      	beq.n	80038ec <__swbuf_r+0x8c>
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	6922      	ldr	r2, [r4, #16]
 8003892:	b2f7      	uxtb	r7, r6
 8003894:	1a98      	subs	r0, r3, r2
 8003896:	6963      	ldr	r3, [r4, #20]
 8003898:	b2f6      	uxtb	r6, r6
 800389a:	4283      	cmp	r3, r0
 800389c:	dc05      	bgt.n	80038aa <__swbuf_r+0x4a>
 800389e:	0021      	movs	r1, r4
 80038a0:	0028      	movs	r0, r5
 80038a2:	f000 f959 	bl	8003b58 <_fflush_r>
 80038a6:	2800      	cmp	r0, #0
 80038a8:	d126      	bne.n	80038f8 <__swbuf_r+0x98>
 80038aa:	68a3      	ldr	r3, [r4, #8]
 80038ac:	3001      	adds	r0, #1
 80038ae:	3b01      	subs	r3, #1
 80038b0:	60a3      	str	r3, [r4, #8]
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	6022      	str	r2, [r4, #0]
 80038b8:	701f      	strb	r7, [r3, #0]
 80038ba:	6963      	ldr	r3, [r4, #20]
 80038bc:	4283      	cmp	r3, r0
 80038be:	d004      	beq.n	80038ca <__swbuf_r+0x6a>
 80038c0:	89a3      	ldrh	r3, [r4, #12]
 80038c2:	07db      	lsls	r3, r3, #31
 80038c4:	d51a      	bpl.n	80038fc <__swbuf_r+0x9c>
 80038c6:	2e0a      	cmp	r6, #10
 80038c8:	d118      	bne.n	80038fc <__swbuf_r+0x9c>
 80038ca:	0021      	movs	r1, r4
 80038cc:	0028      	movs	r0, r5
 80038ce:	f000 f943 	bl	8003b58 <_fflush_r>
 80038d2:	2800      	cmp	r0, #0
 80038d4:	d012      	beq.n	80038fc <__swbuf_r+0x9c>
 80038d6:	e00f      	b.n	80038f8 <__swbuf_r+0x98>
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <__swbuf_r+0xa4>)
 80038da:	429c      	cmp	r4, r3
 80038dc:	d101      	bne.n	80038e2 <__swbuf_r+0x82>
 80038de:	68ac      	ldr	r4, [r5, #8]
 80038e0:	e7cd      	b.n	800387e <__swbuf_r+0x1e>
 80038e2:	4b09      	ldr	r3, [pc, #36]	; (8003908 <__swbuf_r+0xa8>)
 80038e4:	429c      	cmp	r4, r3
 80038e6:	d1ca      	bne.n	800387e <__swbuf_r+0x1e>
 80038e8:	68ec      	ldr	r4, [r5, #12]
 80038ea:	e7c8      	b.n	800387e <__swbuf_r+0x1e>
 80038ec:	0021      	movs	r1, r4
 80038ee:	0028      	movs	r0, r5
 80038f0:	f000 f820 	bl	8003934 <__swsetup_r>
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d0ca      	beq.n	800388e <__swbuf_r+0x2e>
 80038f8:	2601      	movs	r6, #1
 80038fa:	4276      	negs	r6, r6
 80038fc:	0030      	movs	r0, r6
 80038fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003900:	08003e98 	.word	0x08003e98
 8003904:	08003eb8 	.word	0x08003eb8
 8003908:	08003e78 	.word	0x08003e78

0800390c <_write_r>:
 800390c:	b570      	push	{r4, r5, r6, lr}
 800390e:	0005      	movs	r5, r0
 8003910:	0008      	movs	r0, r1
 8003912:	0011      	movs	r1, r2
 8003914:	2200      	movs	r2, #0
 8003916:	4c06      	ldr	r4, [pc, #24]	; (8003930 <_write_r+0x24>)
 8003918:	6022      	str	r2, [r4, #0]
 800391a:	001a      	movs	r2, r3
 800391c:	f7fc ffd4 	bl	80008c8 <_write>
 8003920:	1c43      	adds	r3, r0, #1
 8003922:	d103      	bne.n	800392c <_write_r+0x20>
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d000      	beq.n	800392c <_write_r+0x20>
 800392a:	602b      	str	r3, [r5, #0]
 800392c:	bd70      	pop	{r4, r5, r6, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	20000184 	.word	0x20000184

08003934 <__swsetup_r>:
 8003934:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <__swsetup_r+0xdc>)
 8003936:	b570      	push	{r4, r5, r6, lr}
 8003938:	681d      	ldr	r5, [r3, #0]
 800393a:	0006      	movs	r6, r0
 800393c:	000c      	movs	r4, r1
 800393e:	2d00      	cmp	r5, #0
 8003940:	d005      	beq.n	800394e <__swsetup_r+0x1a>
 8003942:	69ab      	ldr	r3, [r5, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <__swsetup_r+0x1a>
 8003948:	0028      	movs	r0, r5
 800394a:	f7ff fb85 	bl	8003058 <__sinit>
 800394e:	4b31      	ldr	r3, [pc, #196]	; (8003a14 <__swsetup_r+0xe0>)
 8003950:	429c      	cmp	r4, r3
 8003952:	d10f      	bne.n	8003974 <__swsetup_r+0x40>
 8003954:	686c      	ldr	r4, [r5, #4]
 8003956:	230c      	movs	r3, #12
 8003958:	5ee2      	ldrsh	r2, [r4, r3]
 800395a:	b293      	uxth	r3, r2
 800395c:	0719      	lsls	r1, r3, #28
 800395e:	d42d      	bmi.n	80039bc <__swsetup_r+0x88>
 8003960:	06d9      	lsls	r1, r3, #27
 8003962:	d411      	bmi.n	8003988 <__swsetup_r+0x54>
 8003964:	2309      	movs	r3, #9
 8003966:	2001      	movs	r0, #1
 8003968:	6033      	str	r3, [r6, #0]
 800396a:	3337      	adds	r3, #55	; 0x37
 800396c:	4313      	orrs	r3, r2
 800396e:	81a3      	strh	r3, [r4, #12]
 8003970:	4240      	negs	r0, r0
 8003972:	bd70      	pop	{r4, r5, r6, pc}
 8003974:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <__swsetup_r+0xe4>)
 8003976:	429c      	cmp	r4, r3
 8003978:	d101      	bne.n	800397e <__swsetup_r+0x4a>
 800397a:	68ac      	ldr	r4, [r5, #8]
 800397c:	e7eb      	b.n	8003956 <__swsetup_r+0x22>
 800397e:	4b27      	ldr	r3, [pc, #156]	; (8003a1c <__swsetup_r+0xe8>)
 8003980:	429c      	cmp	r4, r3
 8003982:	d1e8      	bne.n	8003956 <__swsetup_r+0x22>
 8003984:	68ec      	ldr	r4, [r5, #12]
 8003986:	e7e6      	b.n	8003956 <__swsetup_r+0x22>
 8003988:	075b      	lsls	r3, r3, #29
 800398a:	d513      	bpl.n	80039b4 <__swsetup_r+0x80>
 800398c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800398e:	2900      	cmp	r1, #0
 8003990:	d008      	beq.n	80039a4 <__swsetup_r+0x70>
 8003992:	0023      	movs	r3, r4
 8003994:	3344      	adds	r3, #68	; 0x44
 8003996:	4299      	cmp	r1, r3
 8003998:	d002      	beq.n	80039a0 <__swsetup_r+0x6c>
 800399a:	0030      	movs	r0, r6
 800399c:	f000 f996 	bl	8003ccc <_free_r>
 80039a0:	2300      	movs	r3, #0
 80039a2:	6363      	str	r3, [r4, #52]	; 0x34
 80039a4:	2224      	movs	r2, #36	; 0x24
 80039a6:	89a3      	ldrh	r3, [r4, #12]
 80039a8:	4393      	bics	r3, r2
 80039aa:	81a3      	strh	r3, [r4, #12]
 80039ac:	2300      	movs	r3, #0
 80039ae:	6063      	str	r3, [r4, #4]
 80039b0:	6923      	ldr	r3, [r4, #16]
 80039b2:	6023      	str	r3, [r4, #0]
 80039b4:	2308      	movs	r3, #8
 80039b6:	89a2      	ldrh	r2, [r4, #12]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	81a3      	strh	r3, [r4, #12]
 80039bc:	6923      	ldr	r3, [r4, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10b      	bne.n	80039da <__swsetup_r+0xa6>
 80039c2:	21a0      	movs	r1, #160	; 0xa0
 80039c4:	2280      	movs	r2, #128	; 0x80
 80039c6:	89a3      	ldrh	r3, [r4, #12]
 80039c8:	0089      	lsls	r1, r1, #2
 80039ca:	0092      	lsls	r2, r2, #2
 80039cc:	400b      	ands	r3, r1
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d003      	beq.n	80039da <__swsetup_r+0xa6>
 80039d2:	0021      	movs	r1, r4
 80039d4:	0030      	movs	r0, r6
 80039d6:	f000 f927 	bl	8003c28 <__smakebuf_r>
 80039da:	2301      	movs	r3, #1
 80039dc:	89a2      	ldrh	r2, [r4, #12]
 80039de:	4013      	ands	r3, r2
 80039e0:	d011      	beq.n	8003a06 <__swsetup_r+0xd2>
 80039e2:	2300      	movs	r3, #0
 80039e4:	60a3      	str	r3, [r4, #8]
 80039e6:	6963      	ldr	r3, [r4, #20]
 80039e8:	425b      	negs	r3, r3
 80039ea:	61a3      	str	r3, [r4, #24]
 80039ec:	2000      	movs	r0, #0
 80039ee:	6923      	ldr	r3, [r4, #16]
 80039f0:	4283      	cmp	r3, r0
 80039f2:	d1be      	bne.n	8003972 <__swsetup_r+0x3e>
 80039f4:	230c      	movs	r3, #12
 80039f6:	5ee2      	ldrsh	r2, [r4, r3]
 80039f8:	0613      	lsls	r3, r2, #24
 80039fa:	d5ba      	bpl.n	8003972 <__swsetup_r+0x3e>
 80039fc:	2340      	movs	r3, #64	; 0x40
 80039fe:	4313      	orrs	r3, r2
 8003a00:	81a3      	strh	r3, [r4, #12]
 8003a02:	3801      	subs	r0, #1
 8003a04:	e7b5      	b.n	8003972 <__swsetup_r+0x3e>
 8003a06:	0792      	lsls	r2, r2, #30
 8003a08:	d400      	bmi.n	8003a0c <__swsetup_r+0xd8>
 8003a0a:	6963      	ldr	r3, [r4, #20]
 8003a0c:	60a3      	str	r3, [r4, #8]
 8003a0e:	e7ed      	b.n	80039ec <__swsetup_r+0xb8>
 8003a10:	2000000c 	.word	0x2000000c
 8003a14:	08003e98 	.word	0x08003e98
 8003a18:	08003eb8 	.word	0x08003eb8
 8003a1c:	08003e78 	.word	0x08003e78

08003a20 <_close_r>:
 8003a20:	2300      	movs	r3, #0
 8003a22:	b570      	push	{r4, r5, r6, lr}
 8003a24:	4c06      	ldr	r4, [pc, #24]	; (8003a40 <_close_r+0x20>)
 8003a26:	0005      	movs	r5, r0
 8003a28:	0008      	movs	r0, r1
 8003a2a:	6023      	str	r3, [r4, #0]
 8003a2c:	f7fd f8b0 	bl	8000b90 <_close>
 8003a30:	1c43      	adds	r3, r0, #1
 8003a32:	d103      	bne.n	8003a3c <_close_r+0x1c>
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d000      	beq.n	8003a3c <_close_r+0x1c>
 8003a3a:	602b      	str	r3, [r5, #0]
 8003a3c:	bd70      	pop	{r4, r5, r6, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	20000184 	.word	0x20000184

08003a44 <__sflush_r>:
 8003a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a46:	898a      	ldrh	r2, [r1, #12]
 8003a48:	0005      	movs	r5, r0
 8003a4a:	000c      	movs	r4, r1
 8003a4c:	0713      	lsls	r3, r2, #28
 8003a4e:	d460      	bmi.n	8003b12 <__sflush_r+0xce>
 8003a50:	684b      	ldr	r3, [r1, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	dc04      	bgt.n	8003a60 <__sflush_r+0x1c>
 8003a56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	dc01      	bgt.n	8003a60 <__sflush_r+0x1c>
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a60:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003a62:	2f00      	cmp	r7, #0
 8003a64:	d0fa      	beq.n	8003a5c <__sflush_r+0x18>
 8003a66:	2300      	movs	r3, #0
 8003a68:	682e      	ldr	r6, [r5, #0]
 8003a6a:	602b      	str	r3, [r5, #0]
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	015b      	lsls	r3, r3, #5
 8003a70:	6a21      	ldr	r1, [r4, #32]
 8003a72:	401a      	ands	r2, r3
 8003a74:	d034      	beq.n	8003ae0 <__sflush_r+0x9c>
 8003a76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a78:	89a3      	ldrh	r3, [r4, #12]
 8003a7a:	075b      	lsls	r3, r3, #29
 8003a7c:	d506      	bpl.n	8003a8c <__sflush_r+0x48>
 8003a7e:	6863      	ldr	r3, [r4, #4]
 8003a80:	1ac0      	subs	r0, r0, r3
 8003a82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <__sflush_r+0x48>
 8003a88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a8a:	1ac0      	subs	r0, r0, r3
 8003a8c:	0002      	movs	r2, r0
 8003a8e:	6a21      	ldr	r1, [r4, #32]
 8003a90:	2300      	movs	r3, #0
 8003a92:	0028      	movs	r0, r5
 8003a94:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003a96:	47b8      	blx	r7
 8003a98:	89a1      	ldrh	r1, [r4, #12]
 8003a9a:	1c43      	adds	r3, r0, #1
 8003a9c:	d106      	bne.n	8003aac <__sflush_r+0x68>
 8003a9e:	682b      	ldr	r3, [r5, #0]
 8003aa0:	2b1d      	cmp	r3, #29
 8003aa2:	d830      	bhi.n	8003b06 <__sflush_r+0xc2>
 8003aa4:	4a2b      	ldr	r2, [pc, #172]	; (8003b54 <__sflush_r+0x110>)
 8003aa6:	40da      	lsrs	r2, r3
 8003aa8:	07d3      	lsls	r3, r2, #31
 8003aaa:	d52c      	bpl.n	8003b06 <__sflush_r+0xc2>
 8003aac:	2300      	movs	r3, #0
 8003aae:	6063      	str	r3, [r4, #4]
 8003ab0:	6923      	ldr	r3, [r4, #16]
 8003ab2:	6023      	str	r3, [r4, #0]
 8003ab4:	04cb      	lsls	r3, r1, #19
 8003ab6:	d505      	bpl.n	8003ac4 <__sflush_r+0x80>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d102      	bne.n	8003ac2 <__sflush_r+0x7e>
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d100      	bne.n	8003ac4 <__sflush_r+0x80>
 8003ac2:	6560      	str	r0, [r4, #84]	; 0x54
 8003ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ac6:	602e      	str	r6, [r5, #0]
 8003ac8:	2900      	cmp	r1, #0
 8003aca:	d0c7      	beq.n	8003a5c <__sflush_r+0x18>
 8003acc:	0023      	movs	r3, r4
 8003ace:	3344      	adds	r3, #68	; 0x44
 8003ad0:	4299      	cmp	r1, r3
 8003ad2:	d002      	beq.n	8003ada <__sflush_r+0x96>
 8003ad4:	0028      	movs	r0, r5
 8003ad6:	f000 f8f9 	bl	8003ccc <_free_r>
 8003ada:	2000      	movs	r0, #0
 8003adc:	6360      	str	r0, [r4, #52]	; 0x34
 8003ade:	e7be      	b.n	8003a5e <__sflush_r+0x1a>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	0028      	movs	r0, r5
 8003ae4:	47b8      	blx	r7
 8003ae6:	1c43      	adds	r3, r0, #1
 8003ae8:	d1c6      	bne.n	8003a78 <__sflush_r+0x34>
 8003aea:	682b      	ldr	r3, [r5, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0c3      	beq.n	8003a78 <__sflush_r+0x34>
 8003af0:	2b1d      	cmp	r3, #29
 8003af2:	d001      	beq.n	8003af8 <__sflush_r+0xb4>
 8003af4:	2b16      	cmp	r3, #22
 8003af6:	d101      	bne.n	8003afc <__sflush_r+0xb8>
 8003af8:	602e      	str	r6, [r5, #0]
 8003afa:	e7af      	b.n	8003a5c <__sflush_r+0x18>
 8003afc:	2340      	movs	r3, #64	; 0x40
 8003afe:	89a2      	ldrh	r2, [r4, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	81a3      	strh	r3, [r4, #12]
 8003b04:	e7ab      	b.n	8003a5e <__sflush_r+0x1a>
 8003b06:	2340      	movs	r3, #64	; 0x40
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	2001      	movs	r0, #1
 8003b0c:	81a3      	strh	r3, [r4, #12]
 8003b0e:	4240      	negs	r0, r0
 8003b10:	e7a5      	b.n	8003a5e <__sflush_r+0x1a>
 8003b12:	690f      	ldr	r7, [r1, #16]
 8003b14:	2f00      	cmp	r7, #0
 8003b16:	d0a1      	beq.n	8003a5c <__sflush_r+0x18>
 8003b18:	680b      	ldr	r3, [r1, #0]
 8003b1a:	600f      	str	r7, [r1, #0]
 8003b1c:	1bdb      	subs	r3, r3, r7
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	2300      	movs	r3, #0
 8003b22:	0792      	lsls	r2, r2, #30
 8003b24:	d100      	bne.n	8003b28 <__sflush_r+0xe4>
 8003b26:	694b      	ldr	r3, [r1, #20]
 8003b28:	60a3      	str	r3, [r4, #8]
 8003b2a:	9b01      	ldr	r3, [sp, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	dc00      	bgt.n	8003b32 <__sflush_r+0xee>
 8003b30:	e794      	b.n	8003a5c <__sflush_r+0x18>
 8003b32:	9b01      	ldr	r3, [sp, #4]
 8003b34:	003a      	movs	r2, r7
 8003b36:	6a21      	ldr	r1, [r4, #32]
 8003b38:	0028      	movs	r0, r5
 8003b3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b3c:	47b0      	blx	r6
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	dc03      	bgt.n	8003b4a <__sflush_r+0x106>
 8003b42:	2340      	movs	r3, #64	; 0x40
 8003b44:	89a2      	ldrh	r2, [r4, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	e7df      	b.n	8003b0a <__sflush_r+0xc6>
 8003b4a:	9b01      	ldr	r3, [sp, #4]
 8003b4c:	183f      	adds	r7, r7, r0
 8003b4e:	1a1b      	subs	r3, r3, r0
 8003b50:	9301      	str	r3, [sp, #4]
 8003b52:	e7ea      	b.n	8003b2a <__sflush_r+0xe6>
 8003b54:	20400001 	.word	0x20400001

08003b58 <_fflush_r>:
 8003b58:	690b      	ldr	r3, [r1, #16]
 8003b5a:	b570      	push	{r4, r5, r6, lr}
 8003b5c:	0005      	movs	r5, r0
 8003b5e:	000c      	movs	r4, r1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <_fflush_r+0x10>
 8003b64:	2000      	movs	r0, #0
 8003b66:	bd70      	pop	{r4, r5, r6, pc}
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	d004      	beq.n	8003b76 <_fflush_r+0x1e>
 8003b6c:	6983      	ldr	r3, [r0, #24]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <_fflush_r+0x1e>
 8003b72:	f7ff fa71 	bl	8003058 <__sinit>
 8003b76:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <_fflush_r+0x4c>)
 8003b78:	429c      	cmp	r4, r3
 8003b7a:	d109      	bne.n	8003b90 <_fflush_r+0x38>
 8003b7c:	686c      	ldr	r4, [r5, #4]
 8003b7e:	220c      	movs	r2, #12
 8003b80:	5ea3      	ldrsh	r3, [r4, r2]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0ee      	beq.n	8003b64 <_fflush_r+0xc>
 8003b86:	0021      	movs	r1, r4
 8003b88:	0028      	movs	r0, r5
 8003b8a:	f7ff ff5b 	bl	8003a44 <__sflush_r>
 8003b8e:	e7ea      	b.n	8003b66 <_fflush_r+0xe>
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <_fflush_r+0x50>)
 8003b92:	429c      	cmp	r4, r3
 8003b94:	d101      	bne.n	8003b9a <_fflush_r+0x42>
 8003b96:	68ac      	ldr	r4, [r5, #8]
 8003b98:	e7f1      	b.n	8003b7e <_fflush_r+0x26>
 8003b9a:	4b04      	ldr	r3, [pc, #16]	; (8003bac <_fflush_r+0x54>)
 8003b9c:	429c      	cmp	r4, r3
 8003b9e:	d1ee      	bne.n	8003b7e <_fflush_r+0x26>
 8003ba0:	68ec      	ldr	r4, [r5, #12]
 8003ba2:	e7ec      	b.n	8003b7e <_fflush_r+0x26>
 8003ba4:	08003e98 	.word	0x08003e98
 8003ba8:	08003eb8 	.word	0x08003eb8
 8003bac:	08003e78 	.word	0x08003e78

08003bb0 <_lseek_r>:
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	0005      	movs	r5, r0
 8003bb4:	0008      	movs	r0, r1
 8003bb6:	0011      	movs	r1, r2
 8003bb8:	2200      	movs	r2, #0
 8003bba:	4c06      	ldr	r4, [pc, #24]	; (8003bd4 <_lseek_r+0x24>)
 8003bbc:	6022      	str	r2, [r4, #0]
 8003bbe:	001a      	movs	r2, r3
 8003bc0:	f7fd f807 	bl	8000bd2 <_lseek>
 8003bc4:	1c43      	adds	r3, r0, #1
 8003bc6:	d103      	bne.n	8003bd0 <_lseek_r+0x20>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d000      	beq.n	8003bd0 <_lseek_r+0x20>
 8003bce:	602b      	str	r3, [r5, #0]
 8003bd0:	bd70      	pop	{r4, r5, r6, pc}
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	20000184 	.word	0x20000184

08003bd8 <__swhatbuf_r>:
 8003bd8:	b570      	push	{r4, r5, r6, lr}
 8003bda:	000e      	movs	r6, r1
 8003bdc:	001d      	movs	r5, r3
 8003bde:	230e      	movs	r3, #14
 8003be0:	5ec9      	ldrsh	r1, [r1, r3]
 8003be2:	b096      	sub	sp, #88	; 0x58
 8003be4:	0014      	movs	r4, r2
 8003be6:	2900      	cmp	r1, #0
 8003be8:	da07      	bge.n	8003bfa <__swhatbuf_r+0x22>
 8003bea:	2300      	movs	r3, #0
 8003bec:	602b      	str	r3, [r5, #0]
 8003bee:	89b3      	ldrh	r3, [r6, #12]
 8003bf0:	061b      	lsls	r3, r3, #24
 8003bf2:	d411      	bmi.n	8003c18 <__swhatbuf_r+0x40>
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	e00f      	b.n	8003c1a <__swhatbuf_r+0x42>
 8003bfa:	466a      	mov	r2, sp
 8003bfc:	f000 f8c4 	bl	8003d88 <_fstat_r>
 8003c00:	2800      	cmp	r0, #0
 8003c02:	dbf2      	blt.n	8003bea <__swhatbuf_r+0x12>
 8003c04:	22f0      	movs	r2, #240	; 0xf0
 8003c06:	9b01      	ldr	r3, [sp, #4]
 8003c08:	0212      	lsls	r2, r2, #8
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	4a05      	ldr	r2, [pc, #20]	; (8003c24 <__swhatbuf_r+0x4c>)
 8003c0e:	189b      	adds	r3, r3, r2
 8003c10:	425a      	negs	r2, r3
 8003c12:	4153      	adcs	r3, r2
 8003c14:	602b      	str	r3, [r5, #0]
 8003c16:	e7ed      	b.n	8003bf4 <__swhatbuf_r+0x1c>
 8003c18:	2340      	movs	r3, #64	; 0x40
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	b016      	add	sp, #88	; 0x58
 8003c20:	bd70      	pop	{r4, r5, r6, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	ffffe000 	.word	0xffffe000

08003c28 <__smakebuf_r>:
 8003c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c2a:	2602      	movs	r6, #2
 8003c2c:	898b      	ldrh	r3, [r1, #12]
 8003c2e:	0005      	movs	r5, r0
 8003c30:	000c      	movs	r4, r1
 8003c32:	4233      	tst	r3, r6
 8003c34:	d006      	beq.n	8003c44 <__smakebuf_r+0x1c>
 8003c36:	0023      	movs	r3, r4
 8003c38:	3347      	adds	r3, #71	; 0x47
 8003c3a:	6023      	str	r3, [r4, #0]
 8003c3c:	6123      	str	r3, [r4, #16]
 8003c3e:	2301      	movs	r3, #1
 8003c40:	6163      	str	r3, [r4, #20]
 8003c42:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003c44:	ab01      	add	r3, sp, #4
 8003c46:	466a      	mov	r2, sp
 8003c48:	f7ff ffc6 	bl	8003bd8 <__swhatbuf_r>
 8003c4c:	9900      	ldr	r1, [sp, #0]
 8003c4e:	0007      	movs	r7, r0
 8003c50:	0028      	movs	r0, r5
 8003c52:	f7ff fa95 	bl	8003180 <_malloc_r>
 8003c56:	2800      	cmp	r0, #0
 8003c58:	d108      	bne.n	8003c6c <__smakebuf_r+0x44>
 8003c5a:	220c      	movs	r2, #12
 8003c5c:	5ea3      	ldrsh	r3, [r4, r2]
 8003c5e:	059a      	lsls	r2, r3, #22
 8003c60:	d4ef      	bmi.n	8003c42 <__smakebuf_r+0x1a>
 8003c62:	2203      	movs	r2, #3
 8003c64:	4393      	bics	r3, r2
 8003c66:	431e      	orrs	r6, r3
 8003c68:	81a6      	strh	r6, [r4, #12]
 8003c6a:	e7e4      	b.n	8003c36 <__smakebuf_r+0xe>
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <__smakebuf_r+0x84>)
 8003c6e:	62ab      	str	r3, [r5, #40]	; 0x28
 8003c70:	2380      	movs	r3, #128	; 0x80
 8003c72:	89a2      	ldrh	r2, [r4, #12]
 8003c74:	6020      	str	r0, [r4, #0]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	81a3      	strh	r3, [r4, #12]
 8003c7a:	9b00      	ldr	r3, [sp, #0]
 8003c7c:	6120      	str	r0, [r4, #16]
 8003c7e:	6163      	str	r3, [r4, #20]
 8003c80:	9b01      	ldr	r3, [sp, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00d      	beq.n	8003ca2 <__smakebuf_r+0x7a>
 8003c86:	230e      	movs	r3, #14
 8003c88:	5ee1      	ldrsh	r1, [r4, r3]
 8003c8a:	0028      	movs	r0, r5
 8003c8c:	f000 f88e 	bl	8003dac <_isatty_r>
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d006      	beq.n	8003ca2 <__smakebuf_r+0x7a>
 8003c94:	2203      	movs	r2, #3
 8003c96:	89a3      	ldrh	r3, [r4, #12]
 8003c98:	4393      	bics	r3, r2
 8003c9a:	001a      	movs	r2, r3
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	81a3      	strh	r3, [r4, #12]
 8003ca2:	89a0      	ldrh	r0, [r4, #12]
 8003ca4:	4338      	orrs	r0, r7
 8003ca6:	81a0      	strh	r0, [r4, #12]
 8003ca8:	e7cb      	b.n	8003c42 <__smakebuf_r+0x1a>
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	0800301d 	.word	0x0800301d

08003cb0 <memchr>:
 8003cb0:	b2c9      	uxtb	r1, r1
 8003cb2:	1882      	adds	r2, r0, r2
 8003cb4:	4290      	cmp	r0, r2
 8003cb6:	d101      	bne.n	8003cbc <memchr+0xc>
 8003cb8:	2000      	movs	r0, #0
 8003cba:	4770      	bx	lr
 8003cbc:	7803      	ldrb	r3, [r0, #0]
 8003cbe:	428b      	cmp	r3, r1
 8003cc0:	d0fb      	beq.n	8003cba <memchr+0xa>
 8003cc2:	3001      	adds	r0, #1
 8003cc4:	e7f6      	b.n	8003cb4 <memchr+0x4>

08003cc6 <__malloc_lock>:
 8003cc6:	4770      	bx	lr

08003cc8 <__malloc_unlock>:
 8003cc8:	4770      	bx	lr
	...

08003ccc <_free_r>:
 8003ccc:	b570      	push	{r4, r5, r6, lr}
 8003cce:	0005      	movs	r5, r0
 8003cd0:	2900      	cmp	r1, #0
 8003cd2:	d010      	beq.n	8003cf6 <_free_r+0x2a>
 8003cd4:	1f0c      	subs	r4, r1, #4
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	da00      	bge.n	8003cde <_free_r+0x12>
 8003cdc:	18e4      	adds	r4, r4, r3
 8003cde:	0028      	movs	r0, r5
 8003ce0:	f7ff fff1 	bl	8003cc6 <__malloc_lock>
 8003ce4:	4a1d      	ldr	r2, [pc, #116]	; (8003d5c <_free_r+0x90>)
 8003ce6:	6813      	ldr	r3, [r2, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <_free_r+0x2c>
 8003cec:	6063      	str	r3, [r4, #4]
 8003cee:	6014      	str	r4, [r2, #0]
 8003cf0:	0028      	movs	r0, r5
 8003cf2:	f7ff ffe9 	bl	8003cc8 <__malloc_unlock>
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
 8003cf8:	42a3      	cmp	r3, r4
 8003cfa:	d909      	bls.n	8003d10 <_free_r+0x44>
 8003cfc:	6821      	ldr	r1, [r4, #0]
 8003cfe:	1860      	adds	r0, r4, r1
 8003d00:	4283      	cmp	r3, r0
 8003d02:	d1f3      	bne.n	8003cec <_free_r+0x20>
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	1841      	adds	r1, r0, r1
 8003d0a:	6021      	str	r1, [r4, #0]
 8003d0c:	e7ee      	b.n	8003cec <_free_r+0x20>
 8003d0e:	0013      	movs	r3, r2
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	2a00      	cmp	r2, #0
 8003d14:	d001      	beq.n	8003d1a <_free_r+0x4e>
 8003d16:	42a2      	cmp	r2, r4
 8003d18:	d9f9      	bls.n	8003d0e <_free_r+0x42>
 8003d1a:	6819      	ldr	r1, [r3, #0]
 8003d1c:	1858      	adds	r0, r3, r1
 8003d1e:	42a0      	cmp	r0, r4
 8003d20:	d10b      	bne.n	8003d3a <_free_r+0x6e>
 8003d22:	6820      	ldr	r0, [r4, #0]
 8003d24:	1809      	adds	r1, r1, r0
 8003d26:	1858      	adds	r0, r3, r1
 8003d28:	6019      	str	r1, [r3, #0]
 8003d2a:	4282      	cmp	r2, r0
 8003d2c:	d1e0      	bne.n	8003cf0 <_free_r+0x24>
 8003d2e:	6810      	ldr	r0, [r2, #0]
 8003d30:	6852      	ldr	r2, [r2, #4]
 8003d32:	1841      	adds	r1, r0, r1
 8003d34:	6019      	str	r1, [r3, #0]
 8003d36:	605a      	str	r2, [r3, #4]
 8003d38:	e7da      	b.n	8003cf0 <_free_r+0x24>
 8003d3a:	42a0      	cmp	r0, r4
 8003d3c:	d902      	bls.n	8003d44 <_free_r+0x78>
 8003d3e:	230c      	movs	r3, #12
 8003d40:	602b      	str	r3, [r5, #0]
 8003d42:	e7d5      	b.n	8003cf0 <_free_r+0x24>
 8003d44:	6821      	ldr	r1, [r4, #0]
 8003d46:	1860      	adds	r0, r4, r1
 8003d48:	4282      	cmp	r2, r0
 8003d4a:	d103      	bne.n	8003d54 <_free_r+0x88>
 8003d4c:	6810      	ldr	r0, [r2, #0]
 8003d4e:	6852      	ldr	r2, [r2, #4]
 8003d50:	1841      	adds	r1, r0, r1
 8003d52:	6021      	str	r1, [r4, #0]
 8003d54:	6062      	str	r2, [r4, #4]
 8003d56:	605c      	str	r4, [r3, #4]
 8003d58:	e7ca      	b.n	8003cf0 <_free_r+0x24>
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	20000090 	.word	0x20000090

08003d60 <_read_r>:
 8003d60:	b570      	push	{r4, r5, r6, lr}
 8003d62:	0005      	movs	r5, r0
 8003d64:	0008      	movs	r0, r1
 8003d66:	0011      	movs	r1, r2
 8003d68:	2200      	movs	r2, #0
 8003d6a:	4c06      	ldr	r4, [pc, #24]	; (8003d84 <_read_r+0x24>)
 8003d6c:	6022      	str	r2, [r4, #0]
 8003d6e:	001a      	movs	r2, r3
 8003d70:	f7fc fef1 	bl	8000b56 <_read>
 8003d74:	1c43      	adds	r3, r0, #1
 8003d76:	d103      	bne.n	8003d80 <_read_r+0x20>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d000      	beq.n	8003d80 <_read_r+0x20>
 8003d7e:	602b      	str	r3, [r5, #0]
 8003d80:	bd70      	pop	{r4, r5, r6, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	20000184 	.word	0x20000184

08003d88 <_fstat_r>:
 8003d88:	2300      	movs	r3, #0
 8003d8a:	b570      	push	{r4, r5, r6, lr}
 8003d8c:	4c06      	ldr	r4, [pc, #24]	; (8003da8 <_fstat_r+0x20>)
 8003d8e:	0005      	movs	r5, r0
 8003d90:	0008      	movs	r0, r1
 8003d92:	0011      	movs	r1, r2
 8003d94:	6023      	str	r3, [r4, #0]
 8003d96:	f7fc ff05 	bl	8000ba4 <_fstat>
 8003d9a:	1c43      	adds	r3, r0, #1
 8003d9c:	d103      	bne.n	8003da6 <_fstat_r+0x1e>
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d000      	beq.n	8003da6 <_fstat_r+0x1e>
 8003da4:	602b      	str	r3, [r5, #0]
 8003da6:	bd70      	pop	{r4, r5, r6, pc}
 8003da8:	20000184 	.word	0x20000184

08003dac <_isatty_r>:
 8003dac:	2300      	movs	r3, #0
 8003dae:	b570      	push	{r4, r5, r6, lr}
 8003db0:	4c06      	ldr	r4, [pc, #24]	; (8003dcc <_isatty_r+0x20>)
 8003db2:	0005      	movs	r5, r0
 8003db4:	0008      	movs	r0, r1
 8003db6:	6023      	str	r3, [r4, #0]
 8003db8:	f7fc ff02 	bl	8000bc0 <_isatty>
 8003dbc:	1c43      	adds	r3, r0, #1
 8003dbe:	d103      	bne.n	8003dc8 <_isatty_r+0x1c>
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d000      	beq.n	8003dc8 <_isatty_r+0x1c>
 8003dc6:	602b      	str	r3, [r5, #0]
 8003dc8:	bd70      	pop	{r4, r5, r6, pc}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	20000184 	.word	0x20000184

08003dd0 <_init>:
 8003dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd6:	bc08      	pop	{r3}
 8003dd8:	469e      	mov	lr, r3
 8003dda:	4770      	bx	lr

08003ddc <_fini>:
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de2:	bc08      	pop	{r3}
 8003de4:	469e      	mov	lr, r3
 8003de6:	4770      	bx	lr
